diff -uwbrN ffmpeg_org/libavcodec/flac.c ffmpeg/libavcodec/flac.c
--- ffmpeg_org/libavcodec/flac.c	2007-11-19 14:26:20.000000000 +0100
+++ ffmpeg/libavcodec/flac.c	2008-10-17 08:09:23.000000000 +0200
@@ -39,6 +39,7 @@
 #include "avcodec.h"
 #include "bitstream.h"
 #include "golomb.h"
+#include "flac.h"
 #include "crc.h"
 
 #undef NDEBUG
@@ -56,34 +57,33 @@
 };
 
 typedef struct FLACContext {
+    FLACSTREAMINFO
+
     AVCodecContext *avctx;
     GetBitContext gb;
 
-    int min_blocksize, max_blocksize;
-    int min_framesize, max_framesize;
-    int samplerate, channels;
     int blocksize/*, last_blocksize*/;
-    int bps, curr_bps;
+    int curr_bps;
     enum decorrelation_type decorrelation;
 
     int32_t *decoded[MAX_CHANNELS];
     uint8_t *bitstream;
-    int bitstream_size;
-    int bitstream_index;
+    unsigned int bitstream_size;
+    unsigned int bitstream_index;
     unsigned int allocated_bitstream_size;
 } FLACContext;
 
 #define METADATA_TYPE_STREAMINFO 0
 
-static int sample_rate_table[] =
+static const int sample_rate_table[] =
 { 0, 0, 0, 0,
   8000, 16000, 22050, 24000, 32000, 44100, 48000, 96000,
   0, 0, 0, 0 };
 
-static int sample_size_table[] =
+static const int sample_size_table[] =
 { 0, 8, 12, 0, 16, 20, 24, 0 };
 
-static int blocksize_table[] = {
+static const int blocksize_table[] = {
      0,    192, 576<<0, 576<<1, 576<<2, 576<<3,      0,      0,
 256<<0, 256<<1, 256<<2, 256<<3, 256<<4, 256<<5, 256<<6, 256<<7
 };
@@ -94,7 +94,6 @@
     return val;
 }
 
-static void metadata_streaminfo(FLACContext *s);
 static void allocate_buffers(FLACContext *s);
 static int metadata_parse(FLACContext *s);
 
@@ -105,25 +104,26 @@
 
     if (avctx->extradata_size > 4) {
         /* initialize based on the demuxer-supplied streamdata header */
-        init_get_bits(&s->gb, avctx->extradata, avctx->extradata_size*8);
         if (avctx->extradata_size == FLAC_STREAMINFO_SIZE) {
-            metadata_streaminfo(s);
+            ff_flac_parse_streaminfo(avctx, (FLACStreaminfo *)s, avctx->extradata);
             allocate_buffers(s);
         } else {
+            init_get_bits(&s->gb, avctx->extradata, avctx->extradata_size*8);
             metadata_parse(s);
         }
     }
 
+    avctx->sample_fmt = SAMPLE_FMT_S16;
     return 0;
 }
 
-static void dump_headers(FLACContext *s)
+static void dump_headers(AVCodecContext *avctx, FLACStreaminfo *s)
 {
-    av_log(s->avctx, AV_LOG_DEBUG, "  Blocksize: %d .. %d (%d)\n", s->min_blocksize, s->max_blocksize, s->blocksize);
-    av_log(s->avctx, AV_LOG_DEBUG, "  Framesize: %d .. %d\n", s->min_framesize, s->max_framesize);
-    av_log(s->avctx, AV_LOG_DEBUG, "  Samplerate: %d\n", s->samplerate);
-    av_log(s->avctx, AV_LOG_DEBUG, "  Channels: %d\n", s->channels);
-    av_log(s->avctx, AV_LOG_DEBUG, "  Bits: %d\n", s->bps);
+    av_log(avctx, AV_LOG_DEBUG, "  Blocksize: %d .. %d\n", s->min_blocksize, s->max_blocksize);
+    av_log(avctx, AV_LOG_DEBUG, "  Max Framesize: %d\n", s->max_framesize);
+    av_log(avctx, AV_LOG_DEBUG, "  Samplerate: %d\n", s->samplerate);
+    av_log(avctx, AV_LOG_DEBUG, "  Channels: %d\n", s->channels);
+    av_log(avctx, AV_LOG_DEBUG, "  Bits: %d\n", s->bps);
 }
 
 static void allocate_buffers(FLACContext *s){
@@ -140,31 +140,36 @@
         s->decoded[i] = av_realloc(s->decoded[i], sizeof(int32_t)*s->max_blocksize);
     }
 
+    if(s->allocated_bitstream_size < s->max_framesize)
     s->bitstream= av_fast_realloc(s->bitstream, &s->allocated_bitstream_size, s->max_framesize);
 }
 
-static void metadata_streaminfo(FLACContext *s)
+void ff_flac_parse_streaminfo(AVCodecContext *avctx, struct FLACStreaminfo *s,
+                              const uint8_t *buffer)
 {
+    GetBitContext gb;
+    init_get_bits(&gb, buffer, FLAC_STREAMINFO_SIZE*8);
+
     /* mandatory streaminfo */
-    s->min_blocksize = get_bits(&s->gb, 16);
-    s->max_blocksize = get_bits(&s->gb, 16);
+    s->min_blocksize = get_bits(&gb, 16);
+    s->max_blocksize = get_bits(&gb, 16);
 
-    s->min_framesize = get_bits_long(&s->gb, 24);
-    s->max_framesize = get_bits_long(&s->gb, 24);
+    skip_bits(&gb, 24); /* skip min frame size */
+    s->max_framesize = get_bits_long(&gb, 24);
 
-    s->samplerate = get_bits_long(&s->gb, 20);
-    s->channels = get_bits(&s->gb, 3) + 1;
-    s->bps = get_bits(&s->gb, 5) + 1;
+    s->samplerate = get_bits_long(&gb, 20);
+    s->channels = get_bits(&gb, 3) + 1;
+    s->bps = get_bits(&gb, 5) + 1;
 
-    s->avctx->channels = s->channels;
-    s->avctx->sample_rate = s->samplerate;
+    avctx->channels = s->channels;
+    avctx->sample_rate = s->samplerate;
 
-    skip_bits(&s->gb, 36); /* total num of samples */
+    skip_bits(&gb, 36); /* total num of samples */
 
-    skip_bits(&s->gb, 64); /* md5 sum */
-    skip_bits(&s->gb, 64); /* md5 sum */
+    skip_bits(&gb, 64); /* md5 sum */
+    skip_bits(&gb, 64); /* md5 sum */
 
-    dump_headers(s);
+    dump_headers(avctx, s);
 }
 
 /**
@@ -177,6 +182,7 @@
 static int metadata_parse(FLACContext *s)
 {
     int i, metadata_last, metadata_type, metadata_size, streaminfo_updated=0;
+    int initial_pos= get_bits_count(&s->gb);
 
     if (show_bits_long(&s->gb, 32) == MKBETAG('f','L','a','C')) {
         skip_bits(&s->gb, 32);
@@ -187,15 +193,19 @@
             metadata_type = get_bits(&s->gb, 7);
             metadata_size = get_bits_long(&s->gb, 24);
 
+            if(get_bits_count(&s->gb) + 8*metadata_size > s->gb.size_in_bits){
+                skip_bits_long(&s->gb, initial_pos - get_bits_count(&s->gb));
+                break;
+            }
+
             av_log(s->avctx, AV_LOG_DEBUG,
                    " metadata block: flag = %d, type = %d, size = %d\n",
                    metadata_last, metadata_type, metadata_size);
             if (metadata_size) {
                 switch (metadata_type) {
                 case METADATA_TYPE_STREAMINFO:
-                    metadata_streaminfo(s);
+                    ff_flac_parse_streaminfo(s->avctx, (FLACStreaminfo *)s, s->gb.buffer+get_bits_count(&s->gb)/8);
                     streaminfo_updated = 1;
-                    break;
 
                 default:
                     for (i=0; i<metadata_size; i++)
@@ -277,9 +287,13 @@
     if (decode_residuals(s, channel, pred_order) < 0)
         return -1;
 
+    if(pred_order > 0)
     a = decoded[pred_order-1];
+    if(pred_order > 1)
     b = a - decoded[pred_order-2];
+    if(pred_order > 2)
     c = b - decoded[pred_order-2] + decoded[pred_order-3];
+    if(pred_order > 3)
     d = c - decoded[pred_order-2] + 2*decoded[pred_order-3] - decoded[pred_order-4];
 
     switch(pred_order)
@@ -569,7 +583,7 @@
     s->bps          = bps;
     s->decorrelation= decorrelation;
 
-//    dump_headers(s);
+//    dump_headers(s->avctx, (FLACStreaminfo *)s);
 
     /* subframes */
     for (i = 0; i < s->channels; i++)
@@ -589,24 +603,32 @@
 
 static int flac_decode_frame(AVCodecContext *avctx,
                             void *data, int *data_size,
-                            uint8_t *buf, int buf_size)
+                            const uint8_t *buf, int buf_size)
 {
     FLACContext *s = avctx->priv_data;
     int tmp = 0, i, j = 0, input_buf_size = 0;
     int16_t *samples = data;
     int alloc_data_size= *data_size;
 
+//av_log(avctx, AV_LOG_DEBUG, "flac_decode_frame, %d\r\n", buf_size );
     *data_size=0;
 
     if(s->max_framesize == 0){
-        s->max_framesize= 65536; // should hopefully be enough for the first header
+        s->max_framesize= FFMAX(4, buf_size); // should hopefully be enough for the first header
         s->bitstream= av_fast_realloc(s->bitstream, &s->allocated_bitstream_size, s->max_framesize);
     }
 
     if(1 && s->max_framesize){//FIXME truncated
-            buf_size= FFMAX(FFMIN(buf_size, s->max_framesize - s->bitstream_size), 0);
+            if(s->bitstream_size < 4 || AV_RL32(s->bitstream) != MKTAG('f','L','a','C'))
+                buf_size= FFMIN(buf_size, s->max_framesize - FFMIN(s->bitstream_size, s->max_framesize));
             input_buf_size= buf_size;
 
+            if(s->bitstream_size + buf_size < buf_size || s->bitstream_index + s->bitstream_size + buf_size < s->bitstream_index)
+                return -1;
+
+            if(s->allocated_bitstream_size < s->bitstream_size + buf_size)
+                s->bitstream= av_fast_realloc(s->bitstream, &s->allocated_bitstream_size, s->bitstream_size + buf_size);
+
             if(s->bitstream_index + s->bitstream_size + buf_size > s->allocated_bitstream_size){
 //                printf("memmove\n");
                 memmove(s->bitstream, &s->bitstream[s->bitstream_index], s->bitstream_size);
@@ -617,7 +639,7 @@
             buf_size += s->bitstream_size;
             s->bitstream_size= buf_size;
 
-            if(buf_size < s->max_framesize){
+            if(buf_size < s->max_framesize && input_buf_size){
 //                printf("wanna more data ...\n");
                 return input_buf_size;
             }
@@ -625,8 +647,9 @@
 
     init_get_bits(&s->gb, buf, buf_size*8);
 
-    if (!metadata_parse(s))
-    {
+    if(metadata_parse(s))
+        goto end;
+
         tmp = show_bits(&s->gb, 16);
         if((tmp & 0xFFFE) != 0xFFF8){
             av_log(s->avctx, AV_LOG_ERROR, "FRAME HEADER not here\n");
@@ -641,7 +664,6 @@
             s->bitstream_index=0;
             return -1;
         }
-    }
 
 
 #if 0
@@ -720,7 +742,7 @@
 
 //    s->last_blocksize = s->blocksize;
 end:
-    i= (get_bits_count(&s->gb)+7)/8;;
+    i= (get_bits_count(&s->gb)+7)/8;
     if(i > buf_size){
         av_log(s->avctx, AV_LOG_ERROR, "overread: %d\n", i - buf_size);
         s->bitstream_size=0;
diff -uwbrN ffmpeg_org/libavcodec/flac.h ffmpeg/libavcodec/flac.h
--- ffmpeg_org/libavcodec/flac.h	1970-01-01 01:00:00.000000000 +0100
+++ ffmpeg/libavcodec/flac.h	2008-10-17 08:04:53.000000000 +0200
@@ -0,0 +1,57 @@
+/*
+ * FLAC (Free Lossless Audio Codec) decoder/demuxer common functions
+ * Copyright (c) 2008 Justin Ruggles
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+/**
+ * @file flac.h
+ * FLAC (Free Lossless Audio Codec) decoder/demuxer common functions
+ */
+
+#ifndef AVCODEC_FLAC_H
+#define AVCODEC_FLAC_H
+
+#include "avcodec.h"
+
+/**
+ * Data needed from the Streaminfo header for use by the raw FLAC demuxer
+ * and/or the FLAC decoder.
+ */
+#define FLACSTREAMINFO \
+    int min_blocksize;      /**< minimum block size, in samples          */\
+    int max_blocksize;      /**< maximum block size, in samples          */\
+    int max_framesize;      /**< maximum frame size, in bytes            */\
+    int samplerate;         /**< sample rate                             */\
+    int channels;           /**< number of channels                      */\
+    int bps;                /**< bits-per-sample                         */\
+
+typedef struct FLACStreaminfo {
+    FLACSTREAMINFO
+} FLACStreaminfo;
+
+/**
+ * Parse the Streaminfo metadata block
+ * @param[out] avctx   codec context to set basic stream parameters
+ * @param[out] s       where parsed information is stored
+ * @param[in]  buffer  pointer to start of 34-byte streaminfo data
+ */
+void ff_flac_parse_streaminfo(AVCodecContext *avctx, struct FLACStreaminfo *s,
+                              const uint8_t *buffer);
+
+#endif /* AVCODEC_FLAC_H */
