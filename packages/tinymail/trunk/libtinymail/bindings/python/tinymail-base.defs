;; -*- scheme -*-
; boxed definitions ...

; interface definitions ...

(define-interface Account
  (in-module "Tny")
  (c-name "TnyAccount")
  (gtype-id "TNY_TYPE_ACCOUNT")
  (prerequisite "GObject")
)

(define-interface AccountStore
  (in-module "Tny")
  (c-name "TnyAccountStore")
  (gtype-id "TNY_TYPE_ACCOUNT_STORE")
  (prerequisite "GObject")
)

(define-interface ConnectionPolicy
  (in-module "Tny")
  (c-name "TnyConnectionPolicy")
  (gtype-id "TNY_TYPE_CONNECTION_POLICY")
)

(define-interface Device
  (in-module "Tny")
  (c-name "TnyDevice")
  (gtype-id "TNY_TYPE_DEVICE")
  (prerequisite "GObject")
)

(define-interface Folder
  (in-module "Tny")
  (c-name "TnyFolder")
  (gtype-id "TNY_TYPE_FOLDER")
  (prerequisite "GObject")
)

(define-interface FolderObserver
  (in-module "Tny")
  (c-name "TnyFolderObserver")
  (gtype-id "TNY_TYPE_FOLDER_OBSERVER")
)

(define-interface FolderStore
  (in-module "Tny")
  (c-name "TnyFolderStore")
  (gtype-id "TNY_TYPE_FOLDER_STORE")
)

(define-interface FolderStoreObserver
  (in-module "Tny")
  (c-name "TnyFolderStoreObserver")
  (gtype-id "TNY_TYPE_FOLDER_STORE_OBSERVER")
)

(define-interface Header
  (in-module "Tny")
  (c-name "TnyHeader")
  (gtype-id "TNY_TYPE_HEADER")
  (prerequisite "GObject")
)

(define-interface Iterator
  (in-module "Tny")
  (c-name "TnyIterator")
  (gtype-id "TNY_TYPE_ITERATOR")
)

(define-interface List
  (in-module "Tny")
  (c-name "TnyList")
  (gtype-id "TNY_TYPE_LIST")
)

(define-interface Lockable
  (in-module "Tny")
  (c-name "TnyLockable")
  (gtype-id "TNY_TYPE_LOCKABLE")
)

(define-interface MimePart
  (in-module "Tny")
  (c-name "TnyMimePart")
  (gtype-id "TNY_TYPE_MIME_PART")
)

(define-interface Msg
  (in-module "Tny")
  (c-name "TnyMsg")
  (gtype-id "TNY_TYPE_MSG")
  (prerequisite "TnyMimePart")
  (prerequisite "GObject")
)

(define-interface MsgReceiveStrategy
  (in-module "Tny")
  (c-name "TnyMsgReceiveStrategy")
  (gtype-id "TNY_TYPE_MSG_RECEIVE_STRATEGY")
)

(define-interface MsgRemoveStrategy
  (in-module "Tny")
  (c-name "TnyMsgRemoveStrategy")
  (gtype-id "TNY_TYPE_MSG_REMOVE_STRATEGY")
)

(define-interface PasswordGetter
  (in-module "Tny")
  (c-name "TnyPasswordGetter")
  (gtype-id "TNY_TYPE_PASSWORD_GETTER")
)

(define-interface Seekable
  (in-module "Tny")
  (c-name "TnySeekable")
  (gtype-id "TNY_TYPE_SEEKABLE")
)

(define-interface SendQueue
  (in-module "Tny")
  (c-name "TnySendQueue")
  (gtype-id "TNY_TYPE_SEND_QUEUE")
  (prerequisite "GObject")
)

(define-interface StoreAccount
  (in-module "Tny")
  (c-name "TnyStoreAccount")
  (gtype-id "TNY_TYPE_STORE_ACCOUNT")
  (prerequisite "TnyAccount")
  (prerequisite "TnyFolderStore")
  (prerequisite "GObject")
)

(define-interface Stream
  (in-module "Tny")
  (c-name "TnyStream")
  (gtype-id "TNY_TYPE_STREAM")
)

(define-interface TransportAccount
  (in-module "Tny")
  (c-name "TnyTransportAccount")
  (gtype-id "TNY_TYPE_TRANSPORT_ACCOUNT")
  (prerequisite "TnyAccount")
  (prerequisite "GObject")
)

; object definitions ...

(define-object CombinedAccount
  (in-module "Tny")
  (parent "GObject")
  (c-name "TnyCombinedAccount")
  (gtype-id "TNY_TYPE_COMBINED_ACCOUNT")
  (implements "TnyAccount")
  (implements "TnyFolderStore")
  (implements "TnyStoreAccount")
  (implements "TnyTransportAccount")
)

(define-object FolderChange
  (in-module "Tny")
  (parent "GObject")
  (c-name "TnyFolderChange")
  (gtype-id "TNY_TYPE_FOLDER_CHANGE")
)

(define-object FolderMonitor
  (in-module "Tny")
  (parent "GObject")
  (c-name "TnyFolderMonitor")
  (gtype-id "TNY_TYPE_FOLDER_MONITOR")
  (implements "TnyFolderObserver")
)

(define-object FolderStats
  (in-module "Tny")
  (parent "GObject")
  (c-name "TnyFolderStats")
  (gtype-id "TNY_TYPE_FOLDER_STATS")
)

(define-object FolderStoreChange
  (in-module "Tny")
  (parent "GObject")
  (c-name "TnyFolderStoreChange")
  (gtype-id "TNY_TYPE_FOLDER_STORE_CHANGE")
)

(define-object FolderStoreQuery
  (in-module "Tny")
  (parent "GObject")
  (c-name "TnyFolderStoreQuery")
  (gtype-id "TNY_TYPE_FOLDER_STORE_QUERY")
)

(define-object FolderStoreQueryItem
  (in-module "Tny")
  (parent "GObject")
  (c-name "TnyFolderStoreQueryItem")
  (gtype-id "TNY_TYPE_FOLDER_STORE_QUERY_ITEM")
)

(define-object FsStream
  (in-module "Tny")
  (parent "GObject")
  (c-name "TnyFsStream")
  (gtype-id "TNY_TYPE_FS_STREAM")
  (implements "TnySeekable")
  (implements "TnyStream")
)

(define-object MergeFolder
  (in-module "Tny")
  (parent "GObject")
  (c-name "TnyMergeFolder")
  (gtype-id "TNY_TYPE_MERGE_FOLDER")
  (implements "TnyFolder")
  (implements "TnyFolderObserver")
)

(define-object NoopLockable
  (in-module "Tny")
  (parent "GObject")
  (c-name "TnyNoopLockable")
  (gtype-id "TNY_TYPE_NOOP_LOCKABLE")
  (implements "TnyLockable")
)

(define-object Pair
  (in-module "Tny")
  (parent "GObject")
  (c-name "TnyPair")
  (gtype-id "TNY_TYPE_PAIR")
)

(define-object SimpleList
  (in-module "Tny")
  (parent "GObject")
  (c-name "TnySimpleList")
  (gtype-id "TNY_TYPE_SIMPLE_LIST")
  (implements "TnyList")
)

; pointer definitions ...

;; Enumerations and Flags ...

(define-enum AccountSignal
  (in-module "Tny")
  (c-name "TnyAccountSignal")
  (gtype-id "TNY_TYPE_ACCOUNT_SIGNAL")
  (values
    '("connection_status_changed" "TNY_ACCOUNT_CONNECTION_STATUS_CHANGED")
    '("changed" "TNY_ACCOUNT_CHANGED")
    '("last_signal" "TNY_ACCOUNT_LAST_SIGNAL")
  )
)

(define-enum AccountType
  (in-module "Tny")
  (c-name "TnyAccountType")
  (gtype-id "TNY_TYPE_ACCOUNT_TYPE")
  (values
    '("store" "TNY_ACCOUNT_TYPE_STORE")
    '("transport" "TNY_ACCOUNT_TYPE_TRANSPORT")
  )
)

(define-enum AlertType
  (in-module "Tny")
  (c-name "TnyAlertType")
  (gtype-id "TNY_TYPE_ALERT_TYPE")
  (values
    '("info" "TNY_ALERT_TYPE_INFO")
    '("warning" "TNY_ALERT_TYPE_WARNING")
    '("error" "TNY_ALERT_TYPE_ERROR")
  )
)

(define-enum ConnectionStatus
  (in-module "Tny")
  (c-name "TnyConnectionStatus")
  (gtype-id "TNY_TYPE_CONNECTION_STATUS")
  (values
    '("disconnected" "TNY_CONNECTION_STATUS_DISCONNECTED")
    '("disconnected-broken" "TNY_CONNECTION_STATUS_DISCONNECTED_BROKEN")
    '("connected-broken" "TNY_CONNECTION_STATUS_CONNECTED_BROKEN")
    '("connected" "TNY_CONNECTION_STATUS_CONNECTED")
    '("reconnecting" "TNY_CONNECTION_STATUS_RECONNECTING")
    '("init" "TNY_CONNECTION_STATUS_INIT")
  )
)

(define-enum FolderSignal
  (in-module "Tny")
  (c-name "TnyFolderSignal")
  (gtype-id "TNY_TYPE_FOLDER_SIGNAL")
  (values
    '("inserted" "TNY_FOLDER_FOLDER_INSERTED")
    '("reloaded" "TNY_FOLDER_FOLDERS_RELOADED")
    '("last-signal" "TNY_FOLDER_LAST_SIGNAL")
  )
)

(define-enum FolderType
  (in-module "Tny")
  (c-name "TnyFolderType")
  (gtype-id "TNY_TYPE_FOLDER_TYPE")
  (values
    '("unknown" "TNY_FOLDER_TYPE_UNKNOWN")
    '("normal" "TNY_FOLDER_TYPE_NORMAL")
    '("inbox" "TNY_FOLDER_TYPE_INBOX")
    '("outbox" "TNY_FOLDER_TYPE_OUTBOX")
    '("trash" "TNY_FOLDER_TYPE_TRASH")
    '("junk" "TNY_FOLDER_TYPE_JUNK")
    '("sent" "TNY_FOLDER_TYPE_SENT")
    '("root" "TNY_FOLDER_TYPE_ROOT")
    '("notes" "TNY_FOLDER_TYPE_NOTES")
    '("drafts" "TNY_FOLDER_TYPE_DRAFTS")
    '("contacts" "TNY_FOLDER_TYPE_CONTACTS")
    '("calendar" "TNY_FOLDER_TYPE_CALENDAR")
    '("archive" "TNY_FOLDER_TYPE_ARCHIVE")
    '("merge" "TNY_FOLDER_TYPE_MERGE")
  )
)

(define-enum GetAccountsRequestType
  (in-module "Tny")
  (c-name "TnyGetAccountsRequestType")
  (gtype-id "TNY_TYPE_GET_ACCOUNTS_REQUEST_TYPE")
  (values
    '("transport" "TNY_ACCOUNT_STORE_TRANSPORT_ACCOUNTS")
    '("store" "TNY_ACCOUNT_STORE_STORE_ACCOUNTS")
    '("both" "TNY_ACCOUNT_STORE_BOTH")
  )
)

(define-enum StatusCode
  (in-module "Tny")
  (c-name "TnyStatusCode")
  (gtype-id "TNY_TYPE_STATUS_CODE")
  (values
    '("folder_status_code_refresh" "TNY_FOLDER_STATUS_CODE_REFRESH")
    '("folder_status_code_get_msg" "TNY_FOLDER_STATUS_CODE_GET_MSG")
    '("get_msg_queue_status_get_msg" "TNY_GET_MSG_QUEUE_STATUS_GET_MSG")
    '("xfer-msgs" "TNY_FOLDER_STATUS_CODE_XFER_MSGS")
    '("copy-folder" "TNY_FOLDER_STATUS_CODE_COPY_FOLDER")
    '("get-secure-auth" "TNY_GET_SUPPORTED_SECURE_AUTH_STATUS_GET_SECURE_AUTH")
    '("code-sync" "TNY_FOLDER_STATUS_CODE_SYNC")
  )
)

(define-enum StatusDomain
  (in-module "Tny")
  (c-name "TnyStatusDomain")
  (gtype-id "TNY_TYPE_STATUS_DOMAIN")
  (values
    '("folder_status" "TNY_FOLDER_STATUS")
    '("get_msg_queue_status" "TNY_GET_MSG_QUEUE_STATUS")
    '("secured-auth-status" "TNY_GET_SUPPORTED_SECURE_AUTH_STATUS")
  )
)

(define-flags FolderCaps
  (in-module "Tny")
  (c-name "TnyFolderCaps")
  (gtype-id "TNY_TYPE_FOLDER_CAPS")
  (values
    '("writable" "TNY_FOLDER_CAPS_WRITABLE")
    '("pushemail" "TNY_FOLDER_CAPS_PUSHEMAIL")
  )
)

(define-flags FolderChangeChanged
  (in-module "Tny")
  (c-name "TnyFolderChangeChanged")
  (gtype-id "TNY_TYPE_FOLDER_CHANGE_CHANGED")
  (values
    '("all-count" "TNY_FOLDER_CHANGE_CHANGED_ALL_COUNT")
    '("unread-count" "TNY_FOLDER_CHANGE_CHANGED_UNREAD_COUNT")
    '("added-headers" "TNY_FOLDER_CHANGE_CHANGED_ADDED_HEADERS")
    '("expunged-headers" "TNY_FOLDER_CHANGE_CHANGED_EXPUNGED_HEADERS")
    '("rename" "TNY_FOLDER_CHANGE_CHANGED_FOLDER_RENAME")
    '("received" "TNY_FOLDER_CHANGE_CHANGED_MSG_RECEIVED")
  )
)

(define-flags FolderStoreChangeChanged
  (in-module "Tny")
  (c-name "TnyFolderStoreChangeChanged")
  (gtype-id "TNY_TYPE_FOLDER_STORE_CHANGE_CHANGED")
  (values
    '("created-folders" "TNY_FOLDER_STORE_CHANGE_CHANGED_CREATED_FOLDERS")
    '("removed-folders" "TNY_FOLDER_STORE_CHANGE_CHANGED_REMOVED_FOLDERS")
  )
)

(define-flags FolderStoreQueryOption
  (in-module "Tny")
  (c-name "TnyFolderStoreQueryOption")
  (gtype-id "TNY_TYPE_FOLDER_STORE_QUERY_OPTION")
  (values
    '("subscribed" "TNY_FOLDER_STORE_QUERY_OPTION_SUBSCRIBED")
    '("unsubscribed" "TNY_FOLDER_STORE_QUERY_OPTION_UNSUBSCRIBED")
    '("match_on_name" "TNY_FOLDER_STORE_QUERY_OPTION_MATCH_ON_NAME")
    '("match_on_id" "TNY_FOLDER_STORE_QUERY_OPTION_MATCH_ON_ID")
    '("pattern_is_case_insensitive" "TNY_FOLDER_STORE_QUERY_OPTION_PATTERN_IS_CASE_INSENSITIVE")
    '("pattern_is_regex" "TNY_FOLDER_STORE_QUERY_OPTION_PATTERN_IS_REGEX")
  )
)

(define-flags HeaderFlags
  (in-module "Tny")
  (c-name "TnyHeaderFlags")
  (gtype-id "TNY_TYPE_HEADER_FLAGS")
  (values
    '("answered" "TNY_HEADER_FLAG_ANSWERED")
    '("deleted" "TNY_HEADER_FLAG_DELETED")
    '("draft" "TNY_HEADER_FLAG_DRAFT")
    '("flagged" "TNY_HEADER_FLAG_FLAGGED")
    '("seen" "TNY_HEADER_FLAG_SEEN")
    '("attachments" "TNY_HEADER_FLAG_ATTACHMENTS")
    '("cached" "TNY_HEADER_FLAG_CACHED")
    '("partial" "TNY_HEADER_FLAG_PARTIAL")
    '("expunged" "TNY_HEADER_FLAG_EXPUNGED")
    '("high-priority" "TNY_HEADER_FLAG_HIGH_PRIORITY")
    '("normal-priority" "TNY_HEADER_FLAG_NORMAL_PRIORITY")
    '("low-priority" "TNY_HEADER_FLAG_LOW_PRIORITY")
    '("suspended" "TNY_HEADER_FLAG_SUSPENDED")
  )
)


;; From tny-account-store.h

(define-function account_store_get_type
  (c-name "tny_account_store_get_type")
  (return-type "GType")
)

(define-function get_accounts_request_type_get_type
  (c-name "tny_get_accounts_request_type_get_type")
  (return-type "GType")
)

(define-function alert_type_get_type
  (c-name "tny_alert_type_get_type")
  (return-type "GType")
)

(define-method get_accounts
  (of-object "TnyAccountStore")
  (c-name "tny_account_store_get_accounts")
  (return-type "none")
  (parameters
    '("TnyList*" "list")
    '("TnyGetAccountsRequestType" "types")
  )
)

(define-method get_cache_dir
  (of-object "TnyAccountStore")
  (c-name "tny_account_store_get_cache_dir")
  (return-type "const-gchar*")
)

(define-method get_device
  (of-object "TnyAccountStore")
  (c-name "tny_account_store_get_device")
  (return-type "TnyDevice*")
)

(define-method alert
  (of-object "TnyAccountStore")
  (c-name "tny_account_store_alert")
  (return-type "gboolean")
  (parameters
    '("TnyAccount*" "account")
    '("TnyAlertType" "type")
    '("gboolean" "question")
    '("GError*" "error")
  )
)

(define-method find_account
  (of-object "TnyAccountStore")
  (c-name "tny_account_store_find_account")
  (return-type "TnyAccount*")
  (parameters
    '("const-gchar*" "url_string")
  )
)

(define-virtual get_accounts
  (of-object "TnyAccountStore")
  (return-type "none")
  (parameters
    '("TnyList*" "list")
    '("TnyGetAccountsRequestType" "types")
  )
)

(define-virtual get_cache_dir
  (of-object "TnyAccountStore")
  (return-type "const-gchar*")
)

(define-virtual get_device
  (of-object "TnyAccountStore")
  (return-type "TnyDevice*")
)

(define-virtual alert
  (of-object "TnyAccountStore")
  (return-type "gboolean")
  (parameters
    '("TnyAccount*" "account")
    '("TnyAlertType" "type")
    '("gboolean" "question")
    '("GError*" "error")
  )
)

(define-virtual find_account
  (of-object "TnyAccountStore")
  (return-type "TnyAccount*")
  (parameters
    '("const-gchar*" "url_string")
  )
)

(define-virtual connecting_started
  (of-object "TnyAccountStore")
  (return-type "none")
)



;; From tny-account.h

(define-function account_get_type
  (c-name "tny_account_get_type")
  (return-type "GType")
)

(define-function account_type_get_type
  (c-name "tny_account_type_get_type")
  (return-type "GType")
)

(define-function connection_status_get_type
  (c-name "tny_connection_status_get_type")
  (return-type "GType")
)

(define-function account_signal_type_get_type
  (c-name "tny_account_signal_type_get_type")
  (return-type "GType")
)

(define-method get_connection_status
  (of-object "TnyAccount")
  (c-name "tny_account_get_connection_status")
  (return-type "TnyConnectionStatus")
)

(define-method set_id
  (of-object "TnyAccount")
  (c-name "tny_account_set_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "id")
  )
)

(define-method set_name
  (of-object "TnyAccount")
  (c-name "tny_account_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_secure_auth_mech
  (of-object "TnyAccount")
  (c-name "tny_account_set_secure_auth_mech")
  (return-type "none")
  (parameters
    '("const-gchar*" "mech")
  )
)

(define-method set_proto
  (of-object "TnyAccount")
  (c-name "tny_account_set_proto")
  (return-type "none")
  (parameters
    '("const-gchar*" "proto")
  )
)

(define-method set_user
  (of-object "TnyAccount")
  (c-name "tny_account_set_user")
  (return-type "none")
  (parameters
    '("const-gchar*" "user")
  )
)

(define-method set_hostname
  (of-object "TnyAccount")
  (c-name "tny_account_set_hostname")
  (return-type "none")
  (parameters
    '("const-gchar*" "host")
  )
)

(define-method set_port
  (of-object "TnyAccount")
  (c-name "tny_account_set_port")
  (return-type "none")
  (parameters
    '("guint" "port")
  )
)

(define-method set_pass_func
  (of-object "TnyAccount")
  (c-name "tny_account_set_pass_func")
  (return-type "none")
  (parameters
    '("TnyGetPassFunc" "get_pass_func")
  )
)

(define-method set_url_string
  (of-object "TnyAccount")
  (c-name "tny_account_set_url_string")
  (return-type "none")
  (parameters
    '("const-gchar*" "url_string")
  )
)

(define-method get_account_type
  (of-object "TnyAccount")
  (c-name "tny_account_get_account_type")
  (return-type "TnyAccountType")
)

(define-method get_id
  (of-object "TnyAccount")
  (c-name "tny_account_get_id")
  (return-type "const-gchar*")
)

(define-method get_name
  (of-object "TnyAccount")
  (c-name "tny_account_get_name")
  (return-type "const-gchar*")
)

(define-method get_secure_auth_mech
  (of-object "TnyAccount")
  (c-name "tny_account_get_secure_auth_mech")
  (return-type "const-gchar*")
)

(define-method get_proto
  (of-object "TnyAccount")
  (c-name "tny_account_get_proto")
  (return-type "const-gchar*")
)

(define-method get_user
  (of-object "TnyAccount")
  (c-name "tny_account_get_user")
  (return-type "const-gchar*")
)

(define-method get_hostname
  (of-object "TnyAccount")
  (c-name "tny_account_get_hostname")
  (return-type "const-gchar*")
)

(define-method get_port
  (of-object "TnyAccount")
  (c-name "tny_account_get_port")
  (return-type "guint")
)

(define-method get_url_string
  (of-object "TnyAccount")
  (c-name "tny_account_get_url_string")
  (return-type "gchar*")
)

(define-method get_pass_func
  (of-object "TnyAccount")
  (c-name "tny_account_get_pass_func")
  (return-type "TnyGetPassFunc")
)

(define-method set_forget_pass_func
  (of-object "TnyAccount")
  (c-name "tny_account_set_forget_pass_func")
  (return-type "none")
  (parameters
    '("TnyForgetPassFunc" "forget_pass_func")
  )
)

(define-method get_forget_pass_func
  (of-object "TnyAccount")
  (c-name "tny_account_get_forget_pass_func")
  (return-type "TnyForgetPassFunc")
)

(define-method cancel
  (of-object "TnyAccount")
  (c-name "tny_account_cancel")
  (return-type "none")
)

(define-method matches_url_string
  (of-object "TnyAccount")
  (c-name "tny_account_matches_url_string")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "url_string")
  )
)

(define-method start_operation
  (of-object "TnyAccount")
  (c-name "tny_account_start_operation")
  (return-type "none")
  (parameters
    '("TnyStatusDomain" "domain")
    '("TnyStatusCode" "code")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "status_user_data")
  )
)

(define-method stop_operation
  (of-object "TnyAccount")
  (c-name "tny_account_stop_operation")
  (return-type "none")
  (parameters
    '("gboolean*" "cancelled")
  )
)

(define-method is_ready
  (of-object "TnyAccount")
  (c-name "tny_account_is_ready")
  (return-type "gboolean")
)

(define-method get_connection_policy
  (of-object "TnyAccount")
  (c-name "tny_account_get_connection_policy")
  (return-type "TnyConnectionPolicy*")
)

(define-method set_connection_policy
  (of-object "TnyAccount")
  (c-name "tny_account_set_connection_policy")
  (return-type "none")
  (parameters
    '("TnyConnectionPolicy*" "policy")
  )
)

(define-virtual get_connection_status
  (of-object "TnyAccount")
  (return-type "TnyConnectionStatus")
)

(define-virtual set_id
  (of-object "TnyAccount")
  (return-type "none")
  (parameters
    '("const-gchar*" "id")
  )
)

(define-virtual set_name
  (of-object "TnyAccount")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-virtual set_secure_auth_mech
  (of-object "TnyAccount")
  (return-type "none")
  (parameters
    '("const-gchar*" "mech")
  )
)

(define-virtual set_proto
  (of-object "TnyAccount")
  (return-type "none")
  (parameters
    '("const-gchar*" "proto")
  )
)

(define-virtual set_user
  (of-object "TnyAccount")
  (return-type "none")
  (parameters
    '("const-gchar*" "user")
  )
)

(define-virtual set_hostname
  (of-object "TnyAccount")
  (return-type "none")
  (parameters
    '("const-gchar*" "host")
  )
)

(define-virtual set_port
  (of-object "TnyAccount")
  (return-type "none")
  (parameters
    '("guint" "port")
  )
)

(define-virtual set_url_string
  (of-object "TnyAccount")
  (return-type "none")
  (parameters
    '("const-gchar*" "url_string")
  )
)

(define-virtual set_pass_func
  (of-object "TnyAccount")
  (return-type "none")
  (parameters
    '("TnyGetPassFunc" "get_pass_func")
  )
)

(define-virtual set_forget_pass_func
  (of-object "TnyAccount")
  (return-type "none")
  (parameters
    '("TnyForgetPassFunc" "forget_pass_func")
  )
)

(define-virtual get_pass_func
  (of-object "TnyAccount")
  (return-type "TnyGetPassFunc")
)

(define-virtual get_forget_pass_func
  (of-object "TnyAccount")
  (return-type "TnyForgetPassFunc")
)

(define-virtual get_id
  (of-object "TnyAccount")
  (return-type "const-gchar*")
)

(define-virtual get_name
  (of-object "TnyAccount")
  (return-type "const-gchar*")
)

(define-virtual get_secure_auth_mech
  (of-object "TnyAccount")
  (return-type "const-gchar*")
)

(define-virtual get_proto
  (of-object "TnyAccount")
  (return-type "const-gchar*")
)

(define-virtual get_user
  (of-object "TnyAccount")
  (return-type "const-gchar*")
)

(define-virtual get_hostname
  (of-object "TnyAccount")
  (return-type "const-gchar*")
)

(define-virtual get_port
  (of-object "TnyAccount")
  (return-type "guint")
)

(define-virtual get_url_string
  (of-object "TnyAccount")
  (return-type "gchar*")
)

(define-virtual get_account_type
  (of-object "TnyAccount")
  (return-type "TnyAccountType")
)

(define-virtual cancel
  (of-object "TnyAccount")
  (return-type "none")
)

(define-virtual matches_url_string
  (of-object "TnyAccount")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "url_string")
  )
)

(define-virtual start_operation
  (of-object "TnyAccount")
  (return-type "none")
  (parameters
    '("TnyStatusDomain" "domain")
    '("TnyStatusCode" "code")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "status_user_data")
  )
)

(define-virtual stop_operation
  (of-object "TnyAccount")
  (return-type "none")
  (parameters
    '("gboolean*" "cancelled")
  )
)

(define-virtual is_ready
  (of-object "TnyAccount")
  (return-type "gboolean")
)

(define-virtual get_connection_policy
  (of-object "TnyAccount")
  (return-type "TnyConnectionPolicy*")
)

(define-virtual set_connection_policy
  (of-object "TnyAccount")
  (return-type "none")
  (parameters
    '("TnyConnectionPolicy*" "policy")
  )
)

(define-virtual connection_status_changed
  (of-object "TnyAccount")
  (return-type "none")
  (parameters
    '("TnyConnectionStatus" "status")
  )
)

(define-virtual changed
  (of-object "TnyAccount")
  (return-type "none")
)



;; From tny-combined-account.h

(define-function combined_account_get_type
  (c-name "tny_combined_account_get_type")
  (return-type "GType")
)

(define-function combined_account_new
  (c-name "tny_combined_account_new")
  (is-constructor-of "TnyCombinedAccount")
  (return-type "TnyAccount*")
  (parameters
    '("TnyTransportAccount*" "ta")
    '("TnyStoreAccount*" "sa")
  )
)

(define-method get_transport_account
  (of-object "TnyCombinedAccount")
  (c-name "tny_combined_account_get_transport_account")
  (return-type "TnyTransportAccount*")
)

(define-method get_store_account
  (of-object "TnyCombinedAccount")
  (c-name "tny_combined_account_get_store_account")
  (return-type "TnyStoreAccount*")
)



;; From tny-connection-policy.h

(define-function connection_policy_get_type
  (c-name "tny_connection_policy_get_type")
  (return-type "GType")
)

(define-method on_connect
  (of-object "TnyConnectionPolicy")
  (c-name "tny_connection_policy_on_connect")
  (return-type "none")
  (parameters
    '("TnyAccount*" "account")
  )
)

(define-method on_disconnect
  (of-object "TnyConnectionPolicy")
  (c-name "tny_connection_policy_on_disconnect")
  (return-type "none")
  (parameters
    '("TnyAccount*" "account")
  )
)

(define-method on_connection_broken
  (of-object "TnyConnectionPolicy")
  (c-name "tny_connection_policy_on_connection_broken")
  (return-type "none")
  (parameters
    '("TnyAccount*" "account")
  )
)

(define-method set_current
  (of-object "TnyConnectionPolicy")
  (c-name "tny_connection_policy_set_current")
  (return-type "none")
  (parameters
    '("TnyAccount*" "account")
    '("TnyFolder*" "folder")
  )
)

(define-virtual on_connect
  (of-object "TnyConnectionPolicy")
  (return-type "none")
  (parameters
    '("TnyAccount*" "account")
  )
)

(define-virtual on_connection_broken
  (of-object "TnyConnectionPolicy")
  (return-type "none")
  (parameters
    '("TnyAccount*" "account")
  )
)

(define-virtual on_disconnect
  (of-object "TnyConnectionPolicy")
  (return-type "none")
  (parameters
    '("TnyAccount*" "account")
  )
)

(define-virtual set_current
  (of-object "TnyConnectionPolicy")
  (return-type "none")
  (parameters
    '("TnyAccount*" "account")
    '("TnyFolder*" "folder")
  )
)



;; From tny-device.h

(define-function device_get_type
  (c-name "tny_device_get_type")
  (return-type "GType")
)

(define-method is_online
  (of-object "TnyDevice")
  (c-name "tny_device_is_online")
  (return-type "gboolean")
)

(define-method force_online
  (of-object "TnyDevice")
  (c-name "tny_device_force_online")
  (return-type "none")
)

(define-method force_offline
  (of-object "TnyDevice")
  (c-name "tny_device_force_offline")
  (return-type "none")
)

(define-method reset
  (of-object "TnyDevice")
  (c-name "tny_device_reset")
  (return-type "none")
)

(define-virtual is_online
  (of-object "TnyDevice")
  (return-type "gboolean")
)

(define-virtual force_online
  (of-object "TnyDevice")
  (return-type "none")
)

(define-virtual force_offline
  (of-object "TnyDevice")
  (return-type "none")
)

(define-virtual reset
  (of-object "TnyDevice")
  (return-type "none")
)

(define-virtual connection_changed
  (of-object "TnyDevice")
  (return-type "none")
  (parameters
    '("gboolean" "online")
  )
)



;; From tny-enums.h



;; From tny-error.h

(define-function error_get_message
  (c-name "tny_error_get_message")
  (return-type "const-gchar*")
  (parameters
    '("GError*" "err")
  )
)

(define-function error_get_code
  (c-name "tny_error_get_code")
  (return-type "gint")
  (parameters
    '("GError*" "err")
  )
)

(define-function get_error_quark
  (c-name "tny_get_error_quark")
  (return-type "GQuark")
)



;; From tny-folder-change.h

(define-function folder_change_get_type
  (c-name "tny_folder_change_get_type")
  (return-type "GType")
)

(define-function folder_change_changed_get_type
  (c-name "tny_folder_change_changed_get_type")
  (return-type "GType")
)

(define-method change_new
  (of-object "TnyFolder")
  (c-name "tny_folder_change_new")
  (return-type "TnyFolderChange*")
)

(define-method get_rename
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_get_rename")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar**" "oldname")
  )
)

(define-method set_rename
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_set_rename")
  (return-type "none")
  (parameters
    '("const-gchar*" "newname")
  )
)

(define-method set_received_msg
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_set_received_msg")
  (return-type "none")
  (parameters
    '("TnyMsg*" "msg")
  )
)

(define-method get_received_msg
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_get_received_msg")
  (return-type "TnyMsg*")
)

(define-method set_new_all_count
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_set_new_all_count")
  (return-type "none")
  (parameters
    '("guint" "new_all_count")
  )
)

(define-method set_new_unread_count
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_set_new_unread_count")
  (return-type "none")
  (parameters
    '("guint" "new_unread_count")
  )
)

(define-method get_new_unread_count
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_get_new_unread_count")
  (return-type "guint")
)

(define-method get_new_all_count
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_get_new_all_count")
  (return-type "guint")
)

(define-method add_added_header
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_add_added_header")
  (return-type "none")
  (parameters
    '("TnyHeader*" "header")
  )
)

(define-method add_expunged_header
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_add_expunged_header")
  (return-type "none")
  (parameters
    '("TnyHeader*" "header")
  )
)

(define-method get_added_headers
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_get_added_headers")
  (return-type "none")
  (parameters
    '("TnyList*" "headers")
  )
)

(define-method get_expunged_headers
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_get_expunged_headers")
  (return-type "none")
  (parameters
    '("TnyList*" "headers")
  )
)

(define-method reset
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_reset")
  (return-type "none")
)

(define-method get_folder
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_get_folder")
  (return-type "TnyFolder*")
)

(define-method get_check_duplicates
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_get_check_duplicates")
  (return-type "gboolean")
)

(define-method set_check_duplicates
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_set_check_duplicates")
  (return-type "none")
  (parameters
    '("gboolean" "check_duplicates")
  )
)

(define-method get_changed
  (of-object "TnyFolderChange")
  (c-name "tny_folder_change_get_changed")
  (return-type "TnyFolderChangeChanged")
)



;; From tny-folder-monitor.h

(define-function folder_monitor_get_type
  (c-name "tny_folder_monitor_get_type")
  (return-type "GType")
)

(define-method monitor_new
  (of-object "TnyFolder")
  (c-name "tny_folder_monitor_new")
  (return-type "TnyFolderObserver*")
)

(define-method poke_status
  (of-object "TnyFolderMonitor")
  (c-name "tny_folder_monitor_poke_status")
  (return-type "none")
)

(define-method add_list
  (of-object "TnyFolderMonitor")
  (c-name "tny_folder_monitor_add_list")
  (return-type "none")
  (parameters
    '("TnyList*" "list")
  )
)

(define-method remove_list
  (of-object "TnyFolderMonitor")
  (c-name "tny_folder_monitor_remove_list")
  (return-type "none")
  (parameters
    '("TnyList*" "list")
  )
)

(define-method stop
  (of-object "TnyFolderMonitor")
  (c-name "tny_folder_monitor_stop")
  (return-type "none")
)

(define-method start
  (of-object "TnyFolderMonitor")
  (c-name "tny_folder_monitor_start")
  (return-type "none")
)

(define-virtual update
  (of-object "TnyFolderMonitor")
  (return-type "none")
  (parameters
    '("TnyFolderChange*" "change")
  )
)

(define-virtual poke_status
  (of-object "TnyFolderMonitor")
  (return-type "none")
)

(define-virtual add_list
  (of-object "TnyFolderMonitor")
  (return-type "none")
  (parameters
    '("TnyList*" "list")
  )
)

(define-virtual remove_list
  (of-object "TnyFolderMonitor")
  (return-type "none")
  (parameters
    '("TnyList*" "list")
  )
)

(define-virtual stop
  (of-object "TnyFolderMonitor")
  (return-type "none")
)

(define-virtual start
  (of-object "TnyFolderMonitor")
  (return-type "none")
)



;; From tny-folder-observer.h

(define-function folder_observer_get_type
  (c-name "tny_folder_observer_get_type")
  (return-type "GType")
)

(define-method update
  (of-object "TnyFolderObserver")
  (c-name "tny_folder_observer_update")
  (return-type "none")
  (parameters
    '("TnyFolderChange*" "change")
  )
)

(define-virtual update
  (of-object "TnyFolderObserver")
  (return-type "none")
  (parameters
    '("TnyFolderChange*" "change")
  )
)



;; From tny-folder-stats.h

(define-function folder_stats_get_type
  (c-name "tny_folder_stats_get_type")
  (return-type "GType")
)

(define-method stats_new
  (of-object "TnyFolder")
  (c-name "tny_folder_stats_new")
  (return-type "TnyFolderStats*")
)

(define-method get_unread_count
  (of-object "TnyFolderStats")
  (c-name "tny_folder_stats_get_unread_count")
  (return-type "guint")
)

(define-method get_all_count
  (of-object "TnyFolderStats")
  (c-name "tny_folder_stats_get_all_count")
  (return-type "guint")
)

(define-method get_local_size
  (of-object "TnyFolderStats")
  (c-name "tny_folder_stats_get_local_size")
  (return-type "gsize")
)

(define-method set_local_size
  (of-object "TnyFolderStats")
  (c-name "tny_folder_stats_set_local_size")
  (return-type "none")
  (parameters
    '("gsize" "local_size")
  )
)

(define-method get_folder
  (of-object "TnyFolderStats")
  (c-name "tny_folder_stats_get_folder")
  (return-type "TnyFolder*")
)



;; From tny-folder-store-change.h

(define-function folder_store_change_get_type
  (c-name "tny_folder_store_change_get_type")
  (return-type "GType")
)

(define-function folder_store_change_changed_get_type
  (c-name "tny_folder_store_change_changed_get_type")
  (return-type "GType")
)

(define-method change_new
  (of-object "TnyFolderStore")
  (c-name "tny_folder_store_change_new")
  (return-type "TnyFolderStoreChange*")
)

(define-method add_created_folder
  (of-object "TnyFolderStoreChange")
  (c-name "tny_folder_store_change_add_created_folder")
  (return-type "none")
  (parameters
    '("TnyFolder*" "folder")
  )
)

(define-method add_removed_folder
  (of-object "TnyFolderStoreChange")
  (c-name "tny_folder_store_change_add_removed_folder")
  (return-type "none")
  (parameters
    '("TnyFolder*" "folder")
  )
)

(define-method get_created_folders
  (of-object "TnyFolderStoreChange")
  (c-name "tny_folder_store_change_get_created_folders")
  (return-type "none")
  (parameters
    '("TnyList*" "folders")
  )
)

(define-method get_removed_folders
  (of-object "TnyFolderStoreChange")
  (c-name "tny_folder_store_change_get_removed_folders")
  (return-type "none")
  (parameters
    '("TnyList*" "folders")
  )
)

(define-method reset
  (of-object "TnyFolderStoreChange")
  (c-name "tny_folder_store_change_reset")
  (return-type "none")
)

(define-method get_folder_store
  (of-object "TnyFolderStoreChange")
  (c-name "tny_folder_store_change_get_folder_store")
  (return-type "TnyFolderStore*")
)

(define-method get_changed
  (of-object "TnyFolderStoreChange")
  (c-name "tny_folder_store_change_get_changed")
  (return-type "TnyFolderStoreChangeChanged")
)



;; From tny-folder-store-observer.h

(define-function folder_store_observer_get_type
  (c-name "tny_folder_store_observer_get_type")
  (return-type "GType")
)

(define-method update
  (of-object "TnyFolderStoreObserver")
  (c-name "tny_folder_store_observer_update")
  (return-type "none")
  (parameters
    '("TnyFolderStoreChange*" "change")
  )
)

(define-virtual update
  (of-object "TnyFolderStoreObserver")
  (return-type "none")
  (parameters
    '("TnyFolderStoreChange*" "change")
  )
)



;; From tny-folder-store-query.h

(define-function folder_store_query_get_type
  (c-name "tny_folder_store_query_get_type")
  (return-type "GType")
)

(define-function folder_store_query_item_get_type
  (c-name "tny_folder_store_query_item_get_type")
  (return-type "GType")
)

(define-function folder_store_query_option_get_type
  (c-name "tny_folder_store_query_option_get_type")
  (return-type "GType")
)

(define-function folder_store_query_new
  (c-name "tny_folder_store_query_new")
  (is-constructor-of "TnyFolderStoreQuery")
  (return-type "TnyFolderStoreQuery*")
)

(define-method add_item
  (of-object "TnyFolderStoreQuery")
  (c-name "tny_folder_store_query_add_item")
  (return-type "none")
  (parameters
    '("const-gchar*" "pattern")
    '("TnyFolderStoreQueryOption" "options")
  )
)

(define-method get_items
  (of-object "TnyFolderStoreQuery")
  (c-name "tny_folder_store_query_get_items")
  (return-type "TnyList*")
)

(define-method get_options
  (of-object "TnyFolderStoreQueryItem")
  (c-name "tny_folder_store_query_item_get_options")
  (return-type "TnyFolderStoreQueryOption")
)

(define-method get_regex
  (of-object "TnyFolderStoreQueryItem")
  (c-name "tny_folder_store_query_item_get_regex")
  (return-type "const-regex_t*")
)

(define-method get_pattern
  (of-object "TnyFolderStoreQueryItem")
  (c-name "tny_folder_store_query_item_get_pattern")
  (return-type "const-gchar*")
)



;; From tny-folder-store.h

(define-function folder_store_get_type
  (c-name "tny_folder_store_get_type")
  (return-type "GType")
)

(define-method remove_folder
  (of-object "TnyFolderStore")
  (c-name "tny_folder_store_remove_folder")
  (return-type "none")
  (parameters
    '("TnyFolder*" "folder")
    '("GError**" "err")
  )
)

(define-method create_folder_async
  (of-object "TnyFolderStore")
  (c-name "tny_folder_store_create_folder_async")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("TnyCreateFolderCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-method get_folders_async
  (of-object "TnyFolderStore")
  (c-name "tny_folder_store_get_folders_async")
  (return-type "none")
  (parameters
    '("TnyList*" "list")
    '("TnyFolderStoreQuery*" "query")
    '("TnyGetFoldersCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-method add_observer
  (of-object "TnyFolderStore")
  (c-name "tny_folder_store_add_observer")
  (return-type "none")
  (parameters
    '("TnyFolderStoreObserver*" "observer")
  )
)

(define-method remove_observer
  (of-object "TnyFolderStore")
  (c-name "tny_folder_store_remove_observer")
  (return-type "none")
  (parameters
    '("TnyFolderStoreObserver*" "observer")
  )
)

(define-method get_folders
  (of-object "TnyFolderStore")
  (c-name "tny_folder_store_get_folders")
  (return-type "none")
  (parameters
    '("TnyList*" "list")
    '("TnyFolderStoreQuery*" "query")
    '("GError**" "err")
  )
)

(define-method create_folder
  (of-object "TnyFolderStore")
  (c-name "tny_folder_store_create_folder")
  (return-type "TnyFolder*")
  (parameters
    '("const-gchar*" "name")
    '("GError**" "err")
  )
)

(define-virtual remove_folder
  (of-object "TnyFolderStore")
  (return-type "none")
  (parameters
    '("TnyFolder*" "folder")
    '("GError**" "err")
  )
)

(define-virtual create_folder
  (of-object "TnyFolderStore")
  (return-type "TnyFolder*")
  (parameters
    '("const-gchar*" "name")
    '("GError**" "err")
  )
)

(define-virtual create_folder_async
  (of-object "TnyFolderStore")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("TnyCreateFolderCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-virtual get_folders
  (of-object "TnyFolderStore")
  (return-type "none")
  (parameters
    '("TnyList*" "list")
    '("TnyFolderStoreQuery*" "query")
    '("GError**" "err")
  )
)

(define-virtual get_folders_async
  (of-object "TnyFolderStore")
  (return-type "none")
  (parameters
    '("TnyList*" "list")
    '("TnyFolderStoreQuery*" "query")
    '("TnyGetFoldersCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-virtual add_observer
  (of-object "TnyFolderStore")
  (return-type "none")
  (parameters
    '("TnyFolderStoreObserver*" "observer")
  )
)

(define-virtual remove_observer
  (of-object "TnyFolderStore")
  (return-type "none")
  (parameters
    '("TnyFolderStoreObserver*" "observer")
  )
)



;; From tny-folder.h

(define-function folder_get_type
  (c-name "tny_folder_get_type")
  (return-type "GType")
)

(define-function folder_type_get_type
  (c-name "tny_folder_type_get_type")
  (return-type "GType")
)

(define-function folder_caps_get_type
  (c-name "tny_folder_caps_get_type")
  (return-type "GType")
)

(define-function folder_signal_get_type
  (c-name "tny_folder_signal_get_type")
  (return-type "GType")
)

(define-method get_msg_remove_strategy
  (of-object "TnyFolder")
  (c-name "tny_folder_get_msg_remove_strategy")
  (return-type "TnyMsgRemoveStrategy*")
)

(define-method set_msg_remove_strategy
  (of-object "TnyFolder")
  (c-name "tny_folder_set_msg_remove_strategy")
  (return-type "none")
  (parameters
    '("TnyMsgRemoveStrategy*" "st")
  )
)

(define-method get_msg_receive_strategy
  (of-object "TnyFolder")
  (c-name "tny_folder_get_msg_receive_strategy")
  (return-type "TnyMsgReceiveStrategy*")
)

(define-method set_msg_receive_strategy
  (of-object "TnyFolder")
  (c-name "tny_folder_set_msg_receive_strategy")
  (return-type "none")
  (parameters
    '("TnyMsgReceiveStrategy*" "st")
  )
)

(define-method add_msg_async
  (of-object "TnyFolder")
  (c-name "tny_folder_add_msg_async")
  (return-type "none")
  (parameters
    '("TnyMsg*" "msg")
    '("TnyFolderCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-method sync_async
  (of-object "TnyFolder")
  (c-name "tny_folder_sync_async")
  (return-type "none")
  (parameters
    '("gboolean" "expunge")
    '("TnyFolderCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-method get_msg_async
  (of-object "TnyFolder")
  (c-name "tny_folder_get_msg_async")
  (return-type "none")
  (parameters
    '("TnyHeader*" "header")
    '("TnyGetMsgCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-method find_msg_async
  (of-object "TnyFolder")
  (c-name "tny_folder_find_msg_async")
  (return-type "none")
  (parameters
    '("const-gchar*" "url_string")
    '("TnyGetMsgCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-method get_headers_async
  (of-object "TnyFolder")
  (c-name "tny_folder_get_headers_async")
  (return-type "none")
  (parameters
    '("TnyList*" "headers")
    '("gboolean" "refresh")
    '("TnyGetHeadersCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-method get_account
  (of-object "TnyFolder")
  (c-name "tny_folder_get_account")
  (return-type "TnyAccount*")
)

(define-method get_id
  (of-object "TnyFolder")
  (c-name "tny_folder_get_id")
  (return-type "const-gchar*")
)

(define-method get_name
  (of-object "TnyFolder")
  (c-name "tny_folder_get_name")
  (return-type "const-gchar*")
)

(define-method get_folder_type
  (of-object "TnyFolder")
  (c-name "tny_folder_get_folder_type")
  (return-type "TnyFolderType")
)

(define-method get_all_count
  (of-object "TnyFolder")
  (c-name "tny_folder_get_all_count")
  (return-type "guint")
)

(define-method get_unread_count
  (of-object "TnyFolder")
  (c-name "tny_folder_get_unread_count")
  (return-type "guint")
)

(define-method get_local_size
  (of-object "TnyFolder")
  (c-name "tny_folder_get_local_size")
  (return-type "guint")
)

(define-method is_subscribed
  (of-object "TnyFolder")
  (c-name "tny_folder_is_subscribed")
  (return-type "gboolean")
)

(define-method refresh_async
  (of-object "TnyFolder")
  (c-name "tny_folder_refresh_async")
  (return-type "none")
  (parameters
    '("TnyFolderCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-method transfer_msgs_async
  (of-object "TnyFolder")
  (c-name "tny_folder_transfer_msgs_async")
  (return-type "none")
  (parameters
    '("TnyList*" "header_list")
    '("TnyFolder*" "folder_dst")
    '("gboolean" "delete_originals")
    '("TnyTransferMsgsCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-method copy_async
  (of-object "TnyFolder")
  (c-name "tny_folder_copy_async")
  (return-type "none")
  (parameters
    '("TnyFolderStore*" "into")
    '("const-gchar*" "new_name")
    '("gboolean" "del")
    '("TnyCopyFolderCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-method poke_status
  (of-object "TnyFolder")
  (c-name "tny_folder_poke_status")
  (return-type "none")
)

(define-method add_observer
  (of-object "TnyFolder")
  (c-name "tny_folder_add_observer")
  (return-type "none")
  (parameters
    '("TnyFolderObserver*" "observer")
  )
)

(define-method remove_observer
  (of-object "TnyFolder")
  (c-name "tny_folder_remove_observer")
  (return-type "none")
  (parameters
    '("TnyFolderObserver*" "observer")
  )
)

(define-method get_folder_store
  (of-object "TnyFolder")
  (c-name "tny_folder_get_folder_store")
  (return-type "TnyFolderStore*")
)

(define-method get_stats
  (of-object "TnyFolder")
  (c-name "tny_folder_get_stats")
  (return-type "TnyFolderStats*")
)

(define-method get_caps
  (of-object "TnyFolder")
  (c-name "tny_folder_get_caps")
  (return-type "TnyFolderCaps")
)

(define-method get_url_string
  (of-object "TnyFolder")
  (c-name "tny_folder_get_url_string")
  (return-type "gchar*")
)

(define-method remove_msgs_async
  (of-object "TnyFolder")
  (c-name "tny_folder_remove_msgs_async")
  (return-type "none")
  (parameters
    '("TnyList*" "headers")
    '("TnyFolderCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-method copy
  (of-object "TnyFolder")
  (c-name "tny_folder_copy")
  (return-type "TnyFolder*")
  (parameters
    '("TnyFolderStore*" "into")
    '("const-gchar*" "new_name")
    '("gboolean" "del")
    '("GError**" "err")
  )
)

(define-method add_msg
  (of-object "TnyFolder")
  (c-name "tny_folder_add_msg")
  (return-type "none")
  (parameters
    '("TnyMsg*" "msg")
    '("GError**" "err")
  )
)

(define-method remove_msg
  (of-object "TnyFolder")
  (c-name "tny_folder_remove_msg")
  (return-type "none")
  (parameters
    '("TnyHeader*" "header")
    '("GError**" "err")
  )
)

(define-method remove_msgs
  (of-object "TnyFolder")
  (c-name "tny_folder_remove_msgs")
  (return-type "none")
  (parameters
    '("TnyList*" "headers")
    '("GError**" "err")
  )
)

(define-method get_msg
  (of-object "TnyFolder")
  (c-name "tny_folder_get_msg")
  (return-type "TnyMsg*")
  (parameters
    '("TnyHeader*" "header")
    '("GError**" "err")
  )
)

(define-method find_msg
  (of-object "TnyFolder")
  (c-name "tny_folder_find_msg")
  (return-type "TnyMsg*")
  (parameters
    '("const-gchar*" "url_string")
    '("GError**" "err")
  )
)

(define-method refresh
  (of-object "TnyFolder")
  (c-name "tny_folder_refresh")
  (return-type "none")
  (parameters
    '("GError**" "err")
  )
)

(define-method transfer_msgs
  (of-object "TnyFolder")
  (c-name "tny_folder_transfer_msgs")
  (return-type "none")
  (parameters
    '("TnyList*" "header_list")
    '("TnyFolder*" "folder_dst")
    '("gboolean" "delete_originals")
    '("GError**" "err")
  )
)

(define-method get_headers
  (of-object "TnyFolder")
  (c-name "tny_folder_get_headers")
  (return-type "none")
  (parameters
    '("TnyList*" "headers")
    '("gboolean" "refresh")
    '("GError**" "err")
  )
)

(define-method sync
  (of-object "TnyFolder")
  (c-name "tny_folder_sync")
  (return-type "none")
  (parameters
    '("gboolean" "expunge")
    '("GError**" "err")
  )
)

(define-virtual remove_msg
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyHeader*" "header")
    '("GError**" "err")
  )
)

(define-virtual remove_msgs
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyList*" "headers")
    '("GError**" "err")
  )
)

(define-virtual add_msg
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyMsg*" "msg")
    '("GError**" "err")
  )
)

(define-virtual add_msg_async
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyMsg*" "msg")
    '("TnyFolderCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-virtual sync
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("gboolean" "expunge")
    '("GError**" "err")
  )
)

(define-virtual sync_async
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("gboolean" "expunge")
    '("TnyFolderCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-virtual get_msg_remove_strategy
  (of-object "TnyFolder")
  (return-type "TnyMsgRemoveStrategy*")
)

(define-virtual set_msg_remove_strategy
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyMsgRemoveStrategy*" "st")
  )
)

(define-virtual get_msg_receive_strategy
  (of-object "TnyFolder")
  (return-type "TnyMsgReceiveStrategy*")
)

(define-virtual set_msg_receive_strategy
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyMsgReceiveStrategy*" "st")
  )
)

(define-virtual get_msg
  (of-object "TnyFolder")
  (return-type "TnyMsg*")
  (parameters
    '("TnyHeader*" "header")
    '("GError**" "err")
  )
)

(define-virtual find_msg
  (of-object "TnyFolder")
  (return-type "TnyMsg*")
  (parameters
    '("const-gchar*" "url_string")
    '("GError**" "err")
  )
)

(define-virtual get_msg_async
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyHeader*" "header")
    '("TnyGetMsgCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-virtual find_msg_async
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("const-gchar*" "url_string")
    '("TnyGetMsgCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-virtual get_headers
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyList*" "headers")
    '("gboolean" "refresh")
    '("GError**" "err")
  )
)

(define-virtual get_headers_async
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyList*" "headers")
    '("gboolean" "refresh")
    '("TnyGetHeadersCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-virtual get_name
  (of-object "TnyFolder")
  (return-type "const-gchar*")
)

(define-virtual get_id
  (of-object "TnyFolder")
  (return-type "const-gchar*")
)

(define-virtual get_account
  (of-object "TnyFolder")
  (return-type "TnyAccount*")
)

(define-virtual get_folder_type
  (of-object "TnyFolder")
  (return-type "TnyFolderType")
)

(define-virtual get_all_count
  (of-object "TnyFolder")
  (return-type "guint")
)

(define-virtual get_unread_count
  (of-object "TnyFolder")
  (return-type "guint")
)

(define-virtual get_local_size
  (of-object "TnyFolder")
  (return-type "guint")
)

(define-virtual is_subscribed
  (of-object "TnyFolder")
  (return-type "gboolean")
)

(define-virtual refresh_async
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyFolderCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-virtual refresh
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("GError**" "err")
  )
)

(define-virtual transfer_msgs
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyList*" "header_list")
    '("TnyFolder*" "folder_dst")
    '("gboolean" "delete_originals")
    '("GError**" "err")
  )
)

(define-virtual transfer_msgs_async
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyList*" "header_list")
    '("TnyFolder*" "folder_dst")
    '("gboolean" "delete_originals")
    '("TnyTransferMsgsCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-virtual copy
  (of-object "TnyFolder")
  (return-type "TnyFolder*")
  (parameters
    '("TnyFolderStore*" "into")
    '("const-gchar*" "new_name")
    '("gboolean" "del")
    '("GError**" "err")
  )
)

(define-virtual copy_async
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyFolderStore*" "into")
    '("const-gchar*" "new_name")
    '("gboolean" "del")
    '("TnyCopyFolderCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-virtual poke_status
  (of-object "TnyFolder")
  (return-type "none")
)

(define-virtual add_observer
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyFolderObserver*" "observer")
  )
)

(define-virtual remove_observer
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyFolderObserver*" "observer")
  )
)

(define-virtual get_folder_store
  (of-object "TnyFolder")
  (return-type "TnyFolderStore*")
)

(define-virtual get_stats
  (of-object "TnyFolder")
  (return-type "TnyFolderStats*")
)

(define-virtual get_url_string
  (of-object "TnyFolder")
  (return-type "gchar*")
)

(define-virtual get_caps
  (of-object "TnyFolder")
  (return-type "TnyFolderCaps")
)

(define-virtual remove_msgs_async
  (of-object "TnyFolder")
  (return-type "none")
  (parameters
    '("TnyList*" "headers")
    '("TnyFolderCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)



;; From tny-fs-stream.h

(define-function fs_stream_get_type
  (c-name "tny_fs_stream_get_type")
  (return-type "GType")
)

(define-function fs_stream_new
  (c-name "tny_fs_stream_new")
  (is-constructor-of "TnyFsStream")
  (return-type "TnyStream*")
  (parameters
    '("int" "fd")
  )
)

(define-method set_fd
  (of-object "TnyFsStream")
  (c-name "tny_fs_stream_set_fd")
  (return-type "none")
  (parameters
    '("int" "fd")
  )
)



;; From tny-header.h

(define-function header_get_type
  (c-name "tny_header_get_type")
  (return-type "GType")
)

(define-function header_flags_get_type
  (c-name "tny_header_flags_get_type")
  (return-type "GType")
)

(define-method dup_uid
  (of-object "TnyHeader")
  (c-name "tny_header_dup_uid")
  (return-type "gchar*")
)

(define-method dup_bcc
  (of-object "TnyHeader")
  (c-name "tny_header_dup_bcc")
  (return-type "gchar*")
)

(define-method dup_cc
  (of-object "TnyHeader")
  (c-name "tny_header_dup_cc")
  (return-type "gchar*")
)

(define-method get_date_received
  (of-object "TnyHeader")
  (c-name "tny_header_get_date_received")
  (return-type "time_t")
)

(define-method get_date_sent
  (of-object "TnyHeader")
  (c-name "tny_header_get_date_sent")
  (return-type "time_t")
)

(define-method dup_message_id
  (of-object "TnyHeader")
  (c-name "tny_header_dup_message_id")
  (return-type "gchar*")
)

(define-method get_message_size
  (of-object "TnyHeader")
  (c-name "tny_header_get_message_size")
  (return-type "guint")
)

(define-method dup_from
  (of-object "TnyHeader")
  (c-name "tny_header_dup_from")
  (return-type "gchar*")
)

(define-method dup_to
  (of-object "TnyHeader")
  (c-name "tny_header_dup_to")
  (return-type "gchar*")
)

(define-method dup_subject
  (of-object "TnyHeader")
  (c-name "tny_header_dup_subject")
  (return-type "gchar*")
)

(define-method dup_replyto
  (of-object "TnyHeader")
  (c-name "tny_header_dup_replyto")
  (return-type "gchar*")
)

(define-method set_bcc
  (of-object "TnyHeader")
  (c-name "tny_header_set_bcc")
  (return-type "none")
  (parameters
    '("const-gchar*" "bcc")
  )
)

(define-method set_cc
  (of-object "TnyHeader")
  (c-name "tny_header_set_cc")
  (return-type "none")
  (parameters
    '("const-gchar*" "cc")
  )
)

(define-method set_from
  (of-object "TnyHeader")
  (c-name "tny_header_set_from")
  (return-type "none")
  (parameters
    '("const-gchar*" "from")
  )
)

(define-method set_subject
  (of-object "TnyHeader")
  (c-name "tny_header_set_subject")
  (return-type "none")
  (parameters
    '("const-gchar*" "subject")
  )
)

(define-method set_to
  (of-object "TnyHeader")
  (c-name "tny_header_set_to")
  (return-type "none")
  (parameters
    '("const-gchar*" "to")
  )
)

(define-method set_replyto
  (of-object "TnyHeader")
  (c-name "tny_header_set_replyto")
  (return-type "none")
  (parameters
    '("const-gchar*" "to")
  )
)

(define-method get_folder
  (of-object "TnyHeader")
  (c-name "tny_header_get_folder")
  (return-type "TnyFolder*")
)

(define-method get_flags
  (of-object "TnyHeader")
  (c-name "tny_header_get_flags")
  (return-type "TnyHeaderFlags")
)

(define-method set_flag
  (of-object "TnyHeader")
  (c-name "tny_header_set_flag")
  (return-type "none")
  (parameters
    '("TnyHeaderFlags" "mask")
  )
)

(define-method unset_flag
  (of-object "TnyHeader")
  (c-name "tny_header_unset_flag")
  (return-type "none")
  (parameters
    '("TnyHeaderFlags" "mask")
  )
)

(define-method get_priority
  (of-object "TnyHeader")
  (c-name "tny_header_get_priority")
  (return-type "TnyHeaderFlags")
)

(define-method set_priority
  (of-object "TnyHeader")
  (c-name "tny_header_set_priority")
  (return-type "none")
  (parameters
    '("TnyHeaderFlags" "priority")
  )
)

(define-virtual dup_uid
  (of-object "TnyHeader")
  (return-type "gchar*")
)

(define-virtual dup_bcc
  (of-object "TnyHeader")
  (return-type "gchar*")
)

(define-virtual dup_cc
  (of-object "TnyHeader")
  (return-type "gchar*")
)

(define-virtual dup_subject
  (of-object "TnyHeader")
  (return-type "gchar*")
)

(define-virtual dup_to
  (of-object "TnyHeader")
  (return-type "gchar*")
)

(define-virtual dup_from
  (of-object "TnyHeader")
  (return-type "gchar*")
)

(define-virtual dup_replyto
  (of-object "TnyHeader")
  (return-type "gchar*")
)

(define-virtual dup_message_id
  (of-object "TnyHeader")
  (return-type "gchar*")
)

(define-virtual get_message_size
  (of-object "TnyHeader")
  (return-type "guint")
)

(define-virtual get_date_received
  (of-object "TnyHeader")
  (return-type "time_t")
)

(define-virtual get_date_sent
  (of-object "TnyHeader")
  (return-type "time_t")
)

(define-virtual set_bcc
  (of-object "TnyHeader")
  (return-type "none")
  (parameters
    '("const-gchar*" "bcc")
  )
)

(define-virtual set_cc
  (of-object "TnyHeader")
  (return-type "none")
  (parameters
    '("const-gchar*" "cc")
  )
)

(define-virtual set_from
  (of-object "TnyHeader")
  (return-type "none")
  (parameters
    '("const-gchar*" "from")
  )
)

(define-virtual set_subject
  (of-object "TnyHeader")
  (return-type "none")
  (parameters
    '("const-gchar*" "subject")
  )
)

(define-virtual set_to
  (of-object "TnyHeader")
  (return-type "none")
  (parameters
    '("const-gchar*" "to")
  )
)

(define-virtual set_replyto
  (of-object "TnyHeader")
  (return-type "none")
  (parameters
    '("const-gchar*" "to")
  )
)

(define-virtual get_folder
  (of-object "TnyHeader")
  (return-type "TnyFolder*")
)

(define-virtual get_flags
  (of-object "TnyHeader")
  (return-type "TnyHeaderFlags")
)

(define-virtual set_flag
  (of-object "TnyHeader")
  (return-type "none")
  (parameters
    '("TnyHeaderFlags" "mask")
  )
)

(define-virtual unset_flag
  (of-object "TnyHeader")
  (return-type "none")
  (parameters
    '("TnyHeaderFlags" "mask")
  )
)



;; From tny-iterator.h

(define-function iterator_get_type
  (c-name "tny_iterator_get_type")
  (return-type "GType")
)

(define-method next
  (of-object "TnyIterator")
  (c-name "tny_iterator_next")
  (return-type "none")
)

(define-method prev
  (of-object "TnyIterator")
  (c-name "tny_iterator_prev")
  (return-type "none")
)

(define-method first
  (of-object "TnyIterator")
  (c-name "tny_iterator_first")
  (return-type "none")
)

(define-method nth
  (of-object "TnyIterator")
  (c-name "tny_iterator_nth")
  (return-type "none")
  (parameters
    '("guint" "nth")
  )
)

(define-method get_current
  (of-object "TnyIterator")
  (c-name "tny_iterator_get_current")
  (return-type "GObject*")
)

(define-method is_done
  (of-object "TnyIterator")
  (c-name "tny_iterator_is_done")
  (return-type "gboolean")
)

(define-method get_list
  (of-object "TnyIterator")
  (c-name "tny_iterator_get_list")
  (return-type "TnyList*")
)

(define-virtual next
  (of-object "TnyIterator")
  (return-type "none")
)

(define-virtual prev
  (of-object "TnyIterator")
  (return-type "none")
)

(define-virtual first
  (of-object "TnyIterator")
  (return-type "none")
)

(define-virtual nth
  (of-object "TnyIterator")
  (return-type "none")
  (parameters
    '("guint" "nth")
  )
)

(define-virtual get_current
  (of-object "TnyIterator")
  (return-type "GObject*")
)

(define-virtual is_done
  (of-object "TnyIterator")
  (return-type "gboolean")
)

(define-virtual get_list
  (of-object "TnyIterator")
  (return-type "TnyList*")
)



;; From tny-list.h

(define-function list_get_type
  (c-name "tny_list_get_type")
  (return-type "GType")
)

(define-method get_length
  (of-object "TnyList")
  (c-name "tny_list_get_length")
  (return-type "guint")
)

(define-method prepend
  (of-object "TnyList")
  (c-name "tny_list_prepend")
  (return-type "none")
  (parameters
    '("GObject*" "item")
  )
)

(define-method append
  (of-object "TnyList")
  (c-name "tny_list_append")
  (return-type "none")
  (parameters
    '("GObject*" "item")
  )
)

(define-method remove
  (of-object "TnyList")
  (c-name "tny_list_remove")
  (return-type "none")
  (parameters
    '("GObject*" "item")
  )
)

(define-method foreach
  (of-object "TnyList")
  (c-name "tny_list_foreach")
  (return-type "none")
  (parameters
    '("GFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method create_iterator
  (of-object "TnyList")
  (c-name "tny_list_create_iterator")
  (return-type "TnyIterator*")
)

(define-method copy
  (of-object "TnyList")
  (c-name "tny_list_copy")
  (return-type "TnyList*")
)

(define-method remove_matches
  (of-object "TnyList")
  (c-name "tny_list_remove_matches")
  (return-type "none")
  (parameters
    '("TnyListMatcher" "matcher")
    '("gpointer" "match_data")
  )
)

(define-virtual get_length
  (of-object "TnyList")
  (return-type "guint")
)

(define-virtual prepend
  (of-object "TnyList")
  (return-type "none")
  (parameters
    '("GObject*" "item")
  )
)

(define-virtual append
  (of-object "TnyList")
  (return-type "none")
  (parameters
    '("GObject*" "item")
  )
)

(define-virtual remove
  (of-object "TnyList")
  (return-type "none")
  (parameters
    '("GObject*" "item")
  )
)

(define-virtual foreach
  (of-object "TnyList")
  (return-type "none")
  (parameters
    '("GFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-virtual copy
  (of-object "TnyList")
  (return-type "TnyList*")
)

(define-virtual create_iterator
  (of-object "TnyList")
  (return-type "TnyIterator*")
)

(define-virtual remove_matches
  (of-object "TnyList")
  (return-type "none")
  (parameters
    '("TnyListMatcher" "matcher")
    '("gpointer" "match_data")
  )
)



;; From tny-lockable.h

(define-function lockable_get_type
  (c-name "tny_lockable_get_type")
  (return-type "GType")
)

(define-method lock
  (of-object "TnyLockable")
  (c-name "tny_lockable_lock")
  (return-type "none")
)

(define-method unlock
  (of-object "TnyLockable")
  (c-name "tny_lockable_unlock")
  (return-type "none")
)

(define-virtual lock
  (of-object "TnyLockable")
  (return-type "none")
)

(define-virtual unlock
  (of-object "TnyLockable")
  (return-type "none")
)



;; From tny-merge-folder.h

(define-function merge_folder_get_type
  (c-name "tny_merge_folder_get_type")
  (return-type "GType")
)

(define-function merge_folder_new
  (c-name "tny_merge_folder_new")
  (is-constructor-of "TnyMergeFolder")
  (return-type "TnyFolder*")
  (parameters
    '("const-gchar*" "folder_name")
  )
)

(define-function merge_folder_new_with_ui_locker
  (c-name "tny_merge_folder_new_with_ui_locker")
  (return-type "TnyFolder*")
  (parameters
    '("const-gchar*" "folder_name")
    '("TnyLockable*" "ui_locker")
  )
)

(define-method set_ui_locker
  (of-object "TnyMergeFolder")
  (c-name "tny_merge_folder_set_ui_locker")
  (return-type "none")
  (parameters
    '("TnyLockable*" "ui_locker")
  )
)

(define-method add_folder
  (of-object "TnyMergeFolder")
  (c-name "tny_merge_folder_add_folder")
  (return-type "none")
  (parameters
    '("TnyFolder*" "folder")
  )
)

(define-method remove_folder
  (of-object "TnyMergeFolder")
  (c-name "tny_merge_folder_remove_folder")
  (return-type "none")
  (parameters
    '("TnyFolder*" "folder")
  )
)

(define-method set_folder_type
  (of-object "TnyMergeFolder")
  (c-name "tny_merge_folder_set_folder_type")
  (return-type "none")
  (parameters
    '("TnyFolderType" "folder_type")
  )
)

(define-method get_folders
  (of-object "TnyMergeFolder")
  (c-name "tny_merge_folder_get_folders")
  (return-type "none")
  (parameters
    '("TnyList*" "list")
  )
)



;; From tny-mime-part.h

(define-function mime_part_get_type
  (c-name "tny_mime_part_get_type")
  (return-type "GType")
)

(define-method get_content_type
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_get_content_type")
  (return-type "const-gchar*")
)

(define-method content_type_is
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_content_type_is")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "type")
  )
)

(define-method get_stream
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_get_stream")
  (return-type "TnyStream*")
)

(define-method get_decoded_stream
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_get_decoded_stream")
  (return-type "TnyStream*")
)

(define-method write_to_stream
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_write_to_stream")
  (return-type "gssize")
  (parameters
    '("TnyStream*" "stream")
    '("GError**" "err")
  )
)

(define-method construct
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_construct")
  (return-type "gint")
  (parameters
    '("TnyStream*" "stream")
    '("const-gchar*" "mime_type")
    '("const-gchar*" "transfer_encoding")
  )
)

(define-method get_filename
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_get_filename")
  (return-type "const-gchar*")
)

(define-method get_content_id
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_get_content_id")
  (return-type "const-gchar*")
)

(define-method get_description
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_get_description")
  (return-type "const-gchar*")
)

(define-method get_content_location
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_get_content_location")
  (return-type "const-gchar*")
)

(define-method is_purged
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_is_purged")
  (return-type "gboolean")
)

(define-method set_content_location
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_set_content_location")
  (return-type "none")
  (parameters
    '("const-gchar*" "content_location")
  )
)

(define-method set_description
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_set_description")
  (return-type "none")
  (parameters
    '("const-gchar*" "description")
  )
)

(define-method set_content_id
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_set_content_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "content_id")
  )
)

(define-method set_filename
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_set_filename")
  (return-type "none")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-method set_content_type
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_set_content_type")
  (return-type "none")
  (parameters
    '("const-gchar*" "contenttype")
  )
)

(define-method set_purged
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_set_purged")
  (return-type "none")
)

(define-method is_attachment
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_is_attachment")
  (return-type "gboolean")
)

(define-method decode_to_stream
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_decode_to_stream")
  (return-type "gssize")
  (parameters
    '("TnyStream*" "stream")
    '("GError**" "err")
  )
)

(define-method get_parts
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_get_parts")
  (return-type "none")
  (parameters
    '("TnyList*" "list")
  )
)

(define-method add_part
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_add_part")
  (return-type "gint")
  (parameters
    '("TnyMimePart*" "part")
  )
)

(define-method del_part
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_del_part")
  (return-type "none")
  (parameters
    '("TnyMimePart*" "part")
  )
)

(define-method get_header_pairs
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_get_header_pairs")
  (return-type "none")
  (parameters
    '("TnyList*" "list")
  )
)

(define-method set_header_pair
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_set_header_pair")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "value")
  )
)

(define-method decode_to_stream_async
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_decode_to_stream_async")
  (return-type "none")
  (parameters
    '("TnyStream*" "stream")
    '("TnyMimePartCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-method get_transfer_encoding
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_get_transfer_encoding")
  (return-type "const-gchar*")
)

(define-method set_transfer_encoding
  (of-object "TnyMimePart")
  (c-name "tny_mime_part_set_transfer_encoding")
  (return-type "none")
  (parameters
    '("const-gchar*" "transfer_encoding")
  )
)

(define-virtual get_content_type
  (of-object "TnyMimePart")
  (return-type "const-gchar*")
)

(define-virtual content_type_is
  (of-object "TnyMimePart")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "content_type")
  )
)

(define-virtual get_stream
  (of-object "TnyMimePart")
  (return-type "TnyStream*")
)

(define-virtual get_decoded_stream
  (of-object "TnyMimePart")
  (return-type "TnyStream*")
)

(define-virtual decode_to_stream
  (of-object "TnyMimePart")
  (return-type "gssize")
  (parameters
    '("TnyStream*" "stream")
    '("GError**" "err")
  )
)

(define-virtual write_to_stream
  (of-object "TnyMimePart")
  (return-type "gssize")
  (parameters
    '("TnyStream*" "stream")
    '("GError**" "err")
  )
)

(define-virtual construct
  (of-object "TnyMimePart")
  (return-type "gint")
  (parameters
    '("TnyStream*" "stream")
    '("const-gchar*" "mime_type")
    '("const-gchar*" "transfer_encoding")
  )
)

(define-virtual get_filename
  (of-object "TnyMimePart")
  (return-type "const-gchar*")
)

(define-virtual get_content_id
  (of-object "TnyMimePart")
  (return-type "const-gchar*")
)

(define-virtual get_description
  (of-object "TnyMimePart")
  (return-type "const-gchar*")
)

(define-virtual get_content_location
  (of-object "TnyMimePart")
  (return-type "const-gchar*")
)

(define-virtual is_purged
  (of-object "TnyMimePart")
  (return-type "gboolean")
)

(define-virtual set_content_location
  (of-object "TnyMimePart")
  (return-type "none")
  (parameters
    '("const-gchar*" "content_location")
  )
)

(define-virtual set_description
  (of-object "TnyMimePart")
  (return-type "none")
  (parameters
    '("const-gchar*" "description")
  )
)

(define-virtual set_content_id
  (of-object "TnyMimePart")
  (return-type "none")
  (parameters
    '("const-gchar*" "content_id")
  )
)

(define-virtual set_filename
  (of-object "TnyMimePart")
  (return-type "none")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-virtual set_content_type
  (of-object "TnyMimePart")
  (return-type "none")
  (parameters
    '("const-gchar*" "contenttype")
  )
)

(define-virtual set_purged
  (of-object "TnyMimePart")
  (return-type "none")
)

(define-virtual is_attachment
  (of-object "TnyMimePart")
  (return-type "gboolean")
)

(define-virtual get_parts
  (of-object "TnyMimePart")
  (return-type "none")
  (parameters
    '("TnyList*" "list")
  )
)

(define-virtual del_part
  (of-object "TnyMimePart")
  (return-type "none")
  (parameters
    '("TnyMimePart*" "part")
  )
)

(define-virtual add_part
  (of-object "TnyMimePart")
  (return-type "gint")
  (parameters
    '("TnyMimePart*" "part")
  )
)

(define-virtual get_header_pairs
  (of-object "TnyMimePart")
  (return-type "none")
  (parameters
    '("TnyList*" "list")
  )
)

(define-virtual set_header_pair
  (of-object "TnyMimePart")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "value")
  )
)

(define-virtual decode_to_stream_async
  (of-object "TnyMimePart")
  (return-type "none")
  (parameters
    '("TnyStream*" "stream")
    '("TnyMimePartCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-virtual get_transfer_encoding
  (of-object "TnyMimePart")
  (return-type "const-gchar*")
)

(define-virtual set_transfer_encoding
  (of-object "TnyMimePart")
  (return-type "none")
  (parameters
    '("const-gchar*" "transfer_encoding")
  )
)



;; From tny-msg-receive-strategy.h

(define-function msg_receive_strategy_get_type
  (c-name "tny_msg_receive_strategy_get_type")
  (return-type "GType")
)

(define-method perform_get_msg
  (of-object "TnyMsgReceiveStrategy")
  (c-name "tny_msg_receive_strategy_perform_get_msg")
  (return-type "TnyMsg*")
  (parameters
    '("TnyFolder*" "folder")
    '("TnyHeader*" "header")
    '("GError**" "err")
  )
)

(define-virtual perform_get_msg
  (of-object "TnyMsgReceiveStrategy")
  (return-type "TnyMsg*")
  (parameters
    '("TnyFolder*" "folder")
    '("TnyHeader*" "header")
    '("GError**" "err")
  )
)



;; From tny-msg-remove-strategy.h

(define-function msg_remove_strategy_get_type
  (c-name "tny_msg_remove_strategy_get_type")
  (return-type "GType")
)

(define-method perform_remove
  (of-object "TnyMsgRemoveStrategy")
  (c-name "tny_msg_remove_strategy_perform_remove")
  (return-type "none")
  (parameters
    '("TnyFolder*" "folder")
    '("TnyHeader*" "header")
    '("GError**" "err")
  )
)

(define-virtual perform_remove
  (of-object "TnyMsgRemoveStrategy")
  (return-type "none")
  (parameters
    '("TnyFolder*" "folder")
    '("TnyHeader*" "header")
    '("GError**" "err")
  )
)



;; From tny-msg.h

(define-function msg_get_type
  (c-name "tny_msg_get_type")
  (return-type "GType")
)

(define-method get_header
  (of-object "TnyMsg")
  (c-name "tny_msg_get_header")
  (return-type "TnyHeader*")
)

(define-method get_folder
  (of-object "TnyMsg")
  (c-name "tny_msg_get_folder")
  (return-type "TnyFolder*")
)

(define-method get_url_string
  (of-object "TnyMsg")
  (c-name "tny_msg_get_url_string")
  (return-type "gchar*")
)

(define-method uncache_attachments
  (of-object "TnyMsg")
  (c-name "tny_msg_uncache_attachments")
  (return-type "none")
)

(define-method rewrite_cache
  (of-object "TnyMsg")
  (c-name "tny_msg_rewrite_cache")
  (return-type "none")
)

(define-method get_allow_external_images
  (of-object "TnyMsg")
  (c-name "tny_msg_get_allow_external_images")
  (return-type "gboolean")
)

(define-method set_allow_external_images
  (of-object "TnyMsg")
  (c-name "tny_msg_set_allow_external_images")
  (return-type "none")
  (parameters
    '("gboolean" "allow")
  )
)

(define-virtual get_header
  (of-object "TnyMsg")
  (return-type "TnyHeader*")
)

(define-virtual get_folder
  (of-object "TnyMsg")
  (return-type "TnyFolder*")
)

(define-virtual get_url_string
  (of-object "TnyMsg")
  (return-type "gchar*")
)

(define-virtual uncache_attachments
  (of-object "TnyMsg")
  (return-type "none")
)

(define-virtual rewrite_cache
  (of-object "TnyMsg")
  (return-type "none")
)

(define-virtual get_allow_external_images
  (of-object "TnyMsg")
  (return-type "gboolean")
)

(define-virtual set_allow_external_images
  (of-object "TnyMsg")
  (return-type "none")
  (parameters
    '("gboolean" "allow")
  )
)



;; From tny-noop-lockable.h

(define-function noop_lockable_get_type
  (c-name "tny_noop_lockable_get_type")
  (return-type "GType")
)

(define-function noop_lockable_new
  (c-name "tny_noop_lockable_new")
  (is-constructor-of "TnyNoopLockable")
  (return-type "TnyLockable*")
)



;; From tny-pair.h

(define-function pair_get_type
  (c-name "tny_pair_get_type")
  (return-type "GType")
)

(define-function pair_new
  (c-name "tny_pair_new")
  (is-constructor-of "TnyPair")
  (return-type "TnyPair*")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "value")
  )
)

(define-method set_name
  (of-object "TnyPair")
  (c-name "tny_pair_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_name
  (of-object "TnyPair")
  (c-name "tny_pair_get_name")
  (return-type "const-gchar*")
)

(define-method set_value
  (of-object "TnyPair")
  (c-name "tny_pair_set_value")
  (return-type "none")
  (parameters
    '("const-gchar*" "value")
  )
)

(define-method get_value
  (of-object "TnyPair")
  (c-name "tny_pair_get_value")
  (return-type "const-gchar*")
)



;; From tny-password-getter.h

(define-function password_getter_get_type
  (c-name "tny_password_getter_get_type")
  (return-type "GType")
)

(define-method get_password
  (of-object "TnyPasswordGetter")
  (c-name "tny_password_getter_get_password")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "aid")
    '("const-gchar*" "prompt")
    '("gboolean*" "cancel")
  )
)

(define-method forget_password
  (of-object "TnyPasswordGetter")
  (c-name "tny_password_getter_forget_password")
  (return-type "none")
  (parameters
    '("const-gchar*" "aid")
  )
)

(define-virtual get_password
  (of-object "TnyPasswordGetter")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "aid")
    '("const-gchar*" "prompt")
    '("gboolean*" "cancel")
  )
)

(define-virtual forget_password
  (of-object "TnyPasswordGetter")
  (return-type "none")
  (parameters
    '("const-gchar*" "aid")
  )
)



;; From tny-seekable.h

(define-function seekable_get_type
  (c-name "tny_seekable_get_type")
  (return-type "GType")
)

(define-method seek
  (of-object "TnySeekable")
  (c-name "tny_seekable_seek")
  (return-type "off_t")
  (parameters
    '("off_t" "offset")
    '("int" "policy")
  )
)

(define-method tell
  (of-object "TnySeekable")
  (c-name "tny_seekable_tell")
  (return-type "off_t")
)

(define-method set_bounds
  (of-object "TnySeekable")
  (c-name "tny_seekable_set_bounds")
  (return-type "gint")
  (parameters
    '("off_t" "start")
    '("off_t" "end")
  )
)

(define-virtual seek
  (of-object "TnySeekable")
  (return-type "off_t")
  (parameters
    '("off_t" "offset")
    '("int" "policy")
  )
)

(define-virtual tell
  (of-object "TnySeekable")
  (return-type "off_t")
)

(define-virtual set_bounds
  (of-object "TnySeekable")
  (return-type "gint")
  (parameters
    '("off_t" "start")
    '("off_t" "end")
  )
)



;; From tny-send-queue.h

(define-function send_queue_get_type
  (c-name "tny_send_queue_get_type")
  (return-type "GType")
)

(define-method add
  (of-object "TnySendQueue")
  (c-name "tny_send_queue_add")
  (return-type "none")
  (parameters
    '("TnyMsg*" "msg")
    '("GError**" "err")
  )
)

(define-method add_async
  (of-object "TnySendQueue")
  (c-name "tny_send_queue_add_async")
  (return-type "none")
  (parameters
    '("TnyMsg*" "msg")
    '("TnySendQueueAddCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-method get_sentbox
  (of-object "TnySendQueue")
  (c-name "tny_send_queue_get_sentbox")
  (return-type "TnyFolder*")
)

(define-method get_outbox
  (of-object "TnySendQueue")
  (c-name "tny_send_queue_get_outbox")
  (return-type "TnyFolder*")
)

(define-method cancel
  (of-object "TnySendQueue")
  (c-name "tny_send_queue_cancel")
  (return-type "none")
  (parameters
    '("TnySendQueueCancelAction" "cancel_action")
    '("GError**" "err")
  )
)

(define-virtual msg_sending
  (of-object "TnySendQueue")
  (return-type "none")
  (parameters
    '("TnyHeader*" "header")
    '("TnyMsg*" "msg")
    '("guint" "nth")
    '("guint" "total")
  )
)

(define-virtual msg_sent
  (of-object "TnySendQueue")
  (return-type "none")
  (parameters
    '("TnyHeader*" "header")
    '("TnyMsg*" "msg")
    '("guint" "nth")
    '("guint" "total")
  )
)

(define-virtual error_happened
  (of-object "TnySendQueue")
  (return-type "none")
  (parameters
    '("TnyHeader*" "header")
    '("TnyMsg*" "msg")
    '("GError*" "err")
    '("gpointer" "user_data")
  )
)

(define-virtual queue_start
  (of-object "TnySendQueue")
  (return-type "none")
  (parameters
    '("gpointer" "user_data")
  )
)

(define-virtual queue_stop
  (of-object "TnySendQueue")
  (return-type "none")
  (parameters
    '("gpointer" "user_data")
  )
)

(define-virtual add
  (of-object "TnySendQueue")
  (return-type "none")
  (parameters
    '("TnyMsg*" "msg")
    '("GError**" "err")
  )
)

(define-virtual add_async
  (of-object "TnySendQueue")
  (return-type "none")
  (parameters
    '("TnyMsg*" "msg")
    '("TnySendQueueAddCallback" "callback")
    '("TnyStatusCallback" "status_callback")
    '("gpointer" "user_data")
  )
)

(define-virtual get_sentbox
  (of-object "TnySendQueue")
  (return-type "TnyFolder*")
)

(define-virtual get_outbox
  (of-object "TnySendQueue")
  (return-type "TnyFolder*")
)

(define-virtual cancel
  (of-object "TnySendQueue")
  (return-type "none")
  (parameters
    '("TnySendQueueCancelAction" "cancel_action")
    '("GError**" "err")
  )
)



;; From tny-shared.h



;; From tny-signals-marshal.h



;; From tny-simple-list.h

(define-function simple_list_get_type
  (c-name "tny_simple_list_get_type")
  (return-type "GType")
)

(define-function simple_list_new
  (c-name "tny_simple_list_new")
  (is-constructor-of "TnySimpleList")
  (return-type "TnyList*")
)



;; From tny-status.h

(define-function status_domain_get_type
  (c-name "tny_status_domain_get_type")
  (return-type "GType")
)

(define-function status_code_get_type
  (c-name "tny_status_code_get_type")
  (return-type "GType")
)

(define-function status_new
  (c-name "tny_status_new")
  (return-type "TnyStatus*")
  (parameters
    '("GQuark" "domain")
    '("gint" "code")
    '("guint" "position")
    '("guint" "of_total")
    '("const-gchar*" "format")
  )
  (varargs #t)
)

(define-function status_new_literal
  (c-name "tny_status_new_literal")
  (return-type "TnyStatus*")
  (parameters
    '("GQuark" "domain")
    '("gint" "code")
    '("guint" "position")
    '("guint" "of_total")
    '("const-gchar*" "message")
  )
)

(define-method free
  (of-object "TnyStatus")
  (c-name "tny_status_free")
  (return-type "none")
)

(define-method copy
  (of-object "TnyStatus")
  (c-name "tny_status_copy")
  (return-type "TnyStatus*")
)

(define-method matches
  (of-object "TnyStatus")
  (c-name "tny_status_matches")
  (return-type "gboolean")
  (parameters
    '("GQuark" "domain")
    '("gint" "code")
  )
)

(define-function set_status
  (c-name "tny_set_status")
  (return-type "none")
  (parameters
    '("TnyStatus**" "status")
    '("GQuark" "domain")
    '("gint" "code")
    '("guint" "position")
    '("guint" "of_total")
    '("gchar*" "format")
  )
  (varargs #t)
)

(define-function clear_status
  (c-name "tny_clear_status")
  (return-type "none")
  (parameters
    '("TnyStatus**" "status")
  )
)

(define-method set_fraction
  (of-object "TnyStatus")
  (c-name "tny_status_set_fraction")
  (return-type "none")
  (parameters
    '("gdouble" "fraction")
  )
)

(define-method get_fraction
  (of-object "TnyStatus")
  (c-name "tny_status_get_fraction")
  (return-type "gdouble")
)



;; From tny-store-account.h

(define-function store_account_get_type
  (c-name "tny_store_account_get_type")
  (return-type "GType")
)

(define-method subscribe
  (of-object "TnyStoreAccount")
  (c-name "tny_store_account_subscribe")
  (return-type "none")
  (parameters
    '("TnyFolder*" "folder")
  )
)

(define-method unsubscribe
  (of-object "TnyStoreAccount")
  (c-name "tny_store_account_unsubscribe")
  (return-type "none")
  (parameters
    '("TnyFolder*" "folder")
  )
)

(define-method find_folder
  (of-object "TnyStoreAccount")
  (c-name "tny_store_account_find_folder")
  (return-type "TnyFolder*")
  (parameters
    '("const-gchar*" "url_string")
    '("GError**" "err")
  )
)

(define-method delete_cache
  (of-object "TnyStoreAccount")
  (c-name "tny_store_account_delete_cache")
  (return-type "none")
)

(define-virtual subscription_changed
  (of-object "TnyStoreAccount")
  (return-type "none")
  (parameters
    '("TnyFolder*" "folder")
  )
)

(define-virtual subscribe
  (of-object "TnyStoreAccount")
  (return-type "none")
  (parameters
    '("TnyFolder*" "folder")
  )
)

(define-virtual unsubscribe
  (of-object "TnyStoreAccount")
  (return-type "none")
  (parameters
    '("TnyFolder*" "folder")
  )
)

(define-virtual find_folder
  (of-object "TnyStoreAccount")
  (return-type "TnyFolder*")
  (parameters
    '("const-gchar*" "url_string")
    '("GError**" "err")
  )
)

(define-virtual delete_cache
  (of-object "TnyStoreAccount")
  (return-type "none")
)



;; From tny-stream.h

(define-function stream_get_type
  (c-name "tny_stream_get_type")
  (return-type "GType")
)

(define-method read
  (of-object "TnyStream")
  (c-name "tny_stream_read")
  (return-type "gssize")
  (parameters
    '("char*" "buffer")
    '("gsize" "n")
  )
)

(define-method write
  (of-object "TnyStream")
  (c-name "tny_stream_write")
  (return-type "gssize")
  (parameters
    '("const-char*" "buffer")
    '("gsize" "n")
  )
)

(define-method flush
  (of-object "TnyStream")
  (c-name "tny_stream_flush")
  (return-type "gint")
)

(define-method close
  (of-object "TnyStream")
  (c-name "tny_stream_close")
  (return-type "gint")
)

(define-method is_eos
  (of-object "TnyStream")
  (c-name "tny_stream_is_eos")
  (return-type "gboolean")
)

(define-method reset
  (of-object "TnyStream")
  (c-name "tny_stream_reset")
  (return-type "gint")
)

(define-method write_to_stream
  (of-object "TnyStream")
  (c-name "tny_stream_write_to_stream")
  (return-type "gssize")
  (parameters
    '("TnyStream*" "output")
  )
)

(define-virtual read
  (of-object "TnyStream")
  (return-type "gssize")
  (parameters
    '("char*" "buffer")
    '("gsize" "n")
  )
)

(define-virtual write
  (of-object "TnyStream")
  (return-type "gssize")
  (parameters
    '("const-char*" "buffer")
    '("gsize" "n")
  )
)

(define-virtual flush
  (of-object "TnyStream")
  (return-type "gint")
)

(define-virtual close
  (of-object "TnyStream")
  (return-type "gint")
)

(define-virtual is_eos
  (of-object "TnyStream")
  (return-type "gboolean")
)

(define-virtual reset
  (of-object "TnyStream")
  (return-type "gint")
)

(define-virtual write_to_stream
  (of-object "TnyStream")
  (return-type "gssize")
  (parameters
    '("TnyStream*" "output")
  )
)



;; From tny-transport-account.h

(define-function transport_account_get_type
  (c-name "tny_transport_account_get_type")
  (return-type "GType")
)

(define-method send
  (of-object "TnyTransportAccount")
  (c-name "tny_transport_account_send")
  (return-type "none")
  (parameters
    '("TnyMsg*" "msg")
    '("GError**" "err")
  )
)

(define-virtual send
  (of-object "TnyTransportAccount")
  (return-type "none")
  (parameters
    '("TnyMsg*" "msg")
    '("GError**" "err")
  )
)



;; From tny.h


